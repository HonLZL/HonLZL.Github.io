<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的自拍</title>
      <link href="/qi-ta/jia-mi-ce-shi/"/>
      <url>/qi-ta/jia-mi-ce-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/football_team.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序和归并排序</title>
      <link href="/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/"/>
      <url>/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h3><h4 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="/suan-fa/suan-fa-bi-ji/"/>
      <url>/suan-fa/suan-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="第一章-基础算法"><a href="#第一章-基础算法" class="headerlink" title="第一章 基础算法"></a>第一章 基础算法</h2><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h3><h4 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二分"><a href="#2-二分" class="headerlink" title="2 二分"></a>2 二分</h3><p><strong>整数二分</strong>：分成两块，一左一右，low一直位于作左边，top一直位于右边，最终low在左边块最右，top在右边那块最左边。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(low+1!=top){int mid=low+top&gt;&gt;1;    if(check(mid)) low=mid;  // low始终在ok的一块    else top=mid;     // top始终在不符合的那块}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小数二分</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(top-low&gt;exp){    double mid=(low+top)/2;    if(check(low)) top=mid;    else low=mid;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-高精度"><a href="#3-高精度" class="headerlink" title="3 高精度"></a>3 高精度</h3><h4 id="3-1-大数加法"><a href="#3-1-大数加法" class="headerlink" title="3.1 大数加法"></a>3.1 大数加法</h4><p>将数存在数组里面，数组倒序储存方便计算。</p><p>思想是模拟。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_add(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||i&lt;B.size();i++)    {        if(i&lt;A.size()) t+=A[i];        if(i&lt;B.size()) t+=B[i];        res.push_back(t%10);        t/=10;    }    if(t) res.push_back(t);   // 最后一位也可能进位    return res;}//调用vector&lt;int&gt; ans=big_add(A,B);for(int i=ans.size()-1;i&gt;=0;i--)  cout&lt;&lt;ans[i];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-大数减法"><a href="#3-2-大数减法" class="headerlink" title="3.2 大数减法"></a>3.2 大数减法</h4><p>计算 A-B，默认 A&gt;B，如果 A&lt;B，则去计算 -(B-A).</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_sub(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size();i++)    {        t+=A[i];        if(i&lt;B.size()) t-=B[i];        if(t&gt;=0) res.push_back(t),t=0;   // 不用借位        else res.push_back(t+10),t=-1;  // 借位    }    while(res.size()&gt;1&amp;&amp;res.back()==0) res.pop_back(); // 去前导零    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-大数乘法"><a href="#3-3-大数乘法" class="headerlink" title="3.3 大数乘法"></a>3.3 大数乘法</h4><p>一般是一个大数乘一个小数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||t;i++)    {        if(i&lt;A.size())  t+=A[i]*b;        res.push_back(t%10);        t/=10;    }    while(res.size()&gt;1&amp;&amp;res.back()==0)   // 去前导零        res.pop_back();    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-大数除法"><a href="#3-4-大数除法" class="headerlink" title="3.4 大数除法"></a>3.4 大数除法</h4><p>一般是一个大数 ÷ 一个小数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; ans;  // 商int y=0;   // 余数void div(vector&lt;int&gt; A,int b)  // A 还是倒着存{    y=0;for(int i=A.size()-1;i&gt;=0;i--)    {        y=y*10+A[i];        res.push_back(y/b);        y%=b;    }    reverse(ans.begin(),ans.end());    while(ans.size()&gt;0&amp;&amp;ans.back()==0)         ans.pop_back();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-前缀和与差分"><a href="#4-前缀和与差分" class="headerlink" title="4 前缀和与差分"></a>4 前缀和与差分</h3><p>前缀和与差分是相反的过程。</p><h4 id="4-1-前缀和"><a href="#4-1-前缀和" class="headerlink" title="4.1 前缀和"></a>4.1 前缀和</h4><p><strong><em>可以快速求出数组某区间内的数值和</em></strong></p><p>一维数组：sum[i]=sum[i-1]+a[i]</p><p>二位数组：sum[i,j]=sum[i-1,j]+sum[i,j-1]-sum[i-1,j-1]+a[i,j]</p><h4 id="4-2-差分"><a href="#4-2-差分" class="headerlink" title="4.2 差分"></a>4.2 差分</h4><p><strong><em>可以快速处理区间同时加减一个数的问题</em></strong></p><p>一维数组：</p><p>已知数组 $a_i$ , 构造 $a_i=b_1+b_2+···+b_i$，即 b 数组前缀和是 a</p><p>通过差分构造: b[i]=a[i]-a[i-1]</p><p>在[l,r]区间加一个数 c 时：b[l]+=c,b[r+1]-=c 。</p><p>通过求前缀和得出 操作后的 a 数组。</p><p>这是离线算法，时间复杂度O(n), 树状数组是在线算法。</p><p>二维数组：</p><p>构造差分数组：b[i,j]=a[i,j]-a[i-1,j]-a[i,j-1]+a[i-1,j-1]</p><p>在(x~1~,y~1~)和(x~2~,y~2~)构成的矩形矩阵内加 c：</p><p>对差分数组操作：b[x~1~,y~1~]+=c, b[x~1~+1,y~2~+1]+=c, b[x~1~,y~2~+1]-=c, b[x~2~+1,y~1~]+=c</p><p>(后续补图)</p><p>最后通过二维数组前缀和求出改变后的数组</p><h3 id="5-离散化"><a href="#5-离散化" class="headerlink" title="5 离散化"></a>5 离散化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(dif,dif+cnt);    // 排序int m=unique(dif,dif+cnt)-dif;   // 去重，m 返回不重复的数int p=lower_bound(dif,dif+m,x)-dif;  // 二分取离散化后 x 映射的位置，后面就用这个位置代表 x 了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第二章-数据结构"><a href="#第二章-数据结构" class="headerlink" title="第二章 数据结构"></a>第二章 数据结构</h2><h3 id="2-1-链表"><a href="#2-1-链表" class="headerlink" title="2.1 链表"></a>2.1 链表</h3><p><strong>单链表</strong></p><p>结构体形式：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{int val;node *next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟单链表: 用邻接表,可以用来存图和树</p><ul><li><p>head：头结点的下标，初始为 -1</p></li><li><p>e[N]：结构体中的 val，e[i] 表示结点 i 的值</p></li><li><p>ne[N]：结构体中的 next 指针，ne[i]表示结点 i 的next指针</p></li><li><p>idx：下表索引，第 idx 个插入链表的</p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int head=-1,e[N],ne[N],idx;void add(int x) // 添加值为 x 的结点,头插法{    e[idx]=x;    ne[idx]=head;    head=idx++;}void add_k(int k,int x)  // 插入下表为k的后面{    e[idx]=x;    n[idx]=ne[k];    ne[k]=idx++;}void dele_k(int k,int x) // 将下标为k的后面那个点删去{    ne[k]=ne[ne[k]];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双链表</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{    int val;    node *nextL,*nextR;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟双链表</p><p>l[i],r[i] 表示 结点 i 的左右指针</p><p>0 表示左端点，1 表示右端点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int e[N],l[N],r[N],idx;r[0]=1; l[1]=0;  idx=2;  // 初始化，互相指void add(int k,int x) // 下表是 k 的右边插入 x{    e[idx]=x;    r[idx]=r[k];   // 新点右指针指向右边的点    l[idx]=k;      // 新点的左指针指向 k    l[r[k]]=idx;  // 右边的做指针指向新插入的点    r[k]=idx++;   // k 的右指针指向新插入的点}void remove(int k)  // 删去下表为 k 的点{    r[l[k]]=r[k];    l[r[k]]=l[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-模拟栈和队列"><a href="#2-2-模拟栈和队列" class="headerlink" title="2.2 模拟栈和队列"></a>2.2 模拟栈和队列</h3><p>先进后出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stk[N],tt=0;stk[++tt]=x;  // 插入tt--;  //弹出tt&gt;0   //不空,否则是空的stk[tt]  // 是栈顶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈的应用：表达式求值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=1000005;// 中序遍历int stk1[N],tt1;char stk2[N];    // 栈里的运算符运算级是递增的int tt2; // 还可以加新的运算符unordered_map&lt;char,int&gt; mp{{'+',1},{'-',1},{'*',2},{'/',2}};void eval(){    // 从后往前运算    int a=stk1[tt1--];  // 运算符后面的数    int b=stk1[tt1--];  // 运算符前面的数    char c=stk2[tt2--];    int res=0;    if(c=='+') res=b+a;    else if(c=='-')  res=b-a;    else if(c=='*')  res=b*a;    else res=b/a;    stk1[++tt1]=res;}int main(){    string s;  cin&gt;&gt;s;    for(int i=0;i&lt;s.length();i++)    {        if(isdigit(s[i]))        {            int j=i,t=0;            while(isdigit(s[j])&amp;&amp;j&lt;s.length())            {                t=t*10+s[j++]-'0';            }            stk1[++tt1]=t;            i=j-1;        }        else if(s[i]=='(') stk2[++tt2]='(';        else if(s[i]==')')        {            while(stk2[tt2]!='(')  eval();            tt2--;  // 弹出左括号        }        else  // 除括号数字以外的运算符        {            // 当前运算符小于栈顶，说明左右子树都遍历完了，此时可以计算出前面的值            while(tt2&amp;&amp;mp[s[i]]&lt;=mp[stk2[tt2]])                eval();            stk2[++tt2]=s[i];        }    }    while(tt2) eval();    cout&lt;&lt;stk1[tt1]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先进先出  $\gets $hh <em> </em> <em> </em> tt$\gets$，从 tt 处加，从 hh 处出</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int q[N],hh,tt=-1;  // hh 是队头，tt是队尾q[++tt]=x;  // 插入队列hh++;  // 弹出hh&lt;=tt  // 不空 否则是空的q[hh]  // 队头q[tt]  // 队尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-单调栈和单调队列"><a href="#2-3-单调栈和单调队列" class="headerlink" title="2.3 单调栈和单调队列"></a>2.3 单调栈和单调队列</h3><p><strong>单调栈</strong>：栈内的元素是具有单调性的</p><p>应用于：找数组中一个数的左边或者右边第一个比它大或者小的数</p><p>例题：<a href="https://www.acwing.com/problem/content/832/">单调栈</a> 给定N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int a[N],stk[N],tt;int main(){    int n;  cin&gt;&gt;n;    for(int i=0;i&lt;n;i++)    {        int x;   cin&gt;&gt;x;        while(x&lt;=stk[tt]&amp;&amp;tt)             tt--;    // 弹出栈内比当前元素大的，保证栈的单调递增的        if(tt==0)  cout&lt;&lt;-1&lt;&lt;" "&lt;&lt;endl;        else cout&lt;&lt;stk[tt]&lt;&lt;" "&lt;&lt;endl;        stk[++tt]=x;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单调队列</strong>：队列元素是单调的，是双端队列</p><p>应用于<strong>滑动窗口</strong>求最值</p><p>例：<a href="https://www.acwing.com/problem/content/156/">滑动窗口</a>，求窗口大小为 k 的最大和最小值</p><p>维护两个单调队列</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 求最小值模板int q[N],hh,tt=-1; // 队列保存下标int ans[N],cnt;// 维护单调性，将队列里后面的大于当前数的删去，去尾while(x&lt;=a[q[tt1]]&amp;&amp;hh&lt;=tt) tt--;// 删头,与 i 距离超过 k 的要删去if(i-q[hh]&gt;=k&amp;&amp;hh&lt;=tt) hh++;q[++tt]=i;  // 将该元素入队if(i&gt;=k-1)  ans[cnt++]=q[hh];  // 存入答案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-KMP"><a href="#2-4-KMP" class="headerlink" title="2.4 KMP"></a>2.4 KMP</h3><p>next[i]: 含义是以 i 为终点的最长后缀，从下标 0 开始，next[0]=-1，next[1]=0</p><p>字符串 p 的 next 值跟当前位无关，所以第 i 位匹配相等时 next[i+1]=j+1, 简写位 next[++i]=++j </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int nxt[N];   // p 要回退的位置void get_next(string p)  // 求模式串next{    nxt[0]=-1;    int i=0, j=-1; // i 为正在匹配的字符的位置，j 表示后缀长度    while(i&lt;p.length())    {        if(j==-1||p[i]==p[j])   nxt[++i]=++j; // 相等，后缀长度++        else  j=nxt[j];    // 回退了j,寻找更小的最大后缀    }}// s是长串，p 是短串是已知next的串void kmp(string s,string p)  {    int i=0,j=0;    int sl=s.length(),pl=p.length();    while(i&lt;sl)    {        if(j==-1||s[i]==p[j]) // 当前匹配成功，都往后移一位            i++, j++;        else  j=nxt[j];   // 匹配失败往前退，相当于向左挪短的串         if(j==p.length()) cout&lt;&lt;i-j&lt;&lt;" "; //输出匹配成功的起始下标    }}// 调用get_next(p);kmp(s,p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Trie树"><a href="#2-5-Trie树" class="headerlink" title="2.5 Trie树"></a>2.5 Trie树</h3><p>是一个能高效地存储和查找字符串集合的数据结构</p><p>建立树，就是向一个集合添加字符串的过程</p><p>查找字符串的数量和建立树类似</p><p>图</p><p><a href="https://www.acwing.com/problem/content/837/">模板题</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int son[N][26];  // 当前结点的儿子，儿子最多有26个，因为小写字母只有26个int cnt[N];    // 打标记，以第 i 字母结尾的字符串的个数int idx;       // 初始化为0，根结点是0void insert(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0)    // p 下不存在儿子 u            son[p][u]=++idx;        p=son[p][u];   // 往下走    }    cnt[p]++;  // 个数+1}int query(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0) return 0;        p=son[p][u];    }    return cnt[p];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Trie 另一个应用：存储二进制数</p><p><a href="https://www.acwing.com/problem/content/145/">最大异或对</a></p><h3 id="2-6-并查集"><a href="#2-6-并查集" class="headerlink" title="2.6 并查集"></a>2.6 并查集</h3><p>将两个集合合并； 询问两个元素是否在同一个集合中</p><p>基础并查集：<a href="https://www.acwing.com/problem/content/838/">模题合并集合</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;=n;i++)     p[i]=i;   // 初始化 p 数组，自成一派int find(int x)  // 返回 x 祖宗结点并路径压缩{return p[x]==x?x:p[x]=find(p[x]);}void merge(int x,int y) // 合并集合{    int u=find(x),v=find(y);    p[u]=v;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展应用：</strong> 维护并查集附加信息</p><p><a href="https://www.acwing.com/problem/content/839/">连通块数量</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 实时查询某元素所在集合中元素的数量// 在合并时记录，只维护根结点对应的 cntvoid merge(int x,int y){    int u=find(x),v=find(y);    if(u!=v)      {        p[u]=v;    // 将祖宗为 u 所在的集合合并到 v 所在的集合        cnt[v]+=cnt[u];   // 祖宗 v 的数量增加了    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展应用：维护当前点到根结点的距离</p><p><a href="https://www.acwing.com/problem/content/description/242/">食物链</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=50005;int p[N],ans,dis[N];int find(int x){    if(p[x]!=x)    {        int fa = find(p[x]);        dis[x] += dis[p[x]];        p[x] = fa;    }    return p[x];}int main(){    int n,m;  scanf("%d%d",&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++) p[i]=i;    while(m--)    {        int f,a,b;  scanf("%d%d%d",&amp;f,&amp;a,&amp;b);        if(a&gt;n||b&gt;n) {ans++; continue;}        int x=find(a);        int y=find(b);        if(f==1)        {            if(x==y&amp;&amp;(dis[b]-dis[a])%3) ans++;            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+3)%3;            }        }        else        {            if(a==b) ans++;            else if(x==y&amp;&amp;(dis[a]-dis[b]-1)%3)            {                ans++;            }            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+1+3)%3;            }        }    }    printf("%d",ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-堆"><a href="#2-7-堆" class="headerlink" title="2.7 堆"></a>2.7 堆</h3><p>堆是一棵完全二叉树，顶点取最值</p><p><img src="D:\Desktop\算法\基础\堆.png" alt="堆"></p><p>由于编号位 i 的父结点的左结点为 2i，右结点为 2i+1，所以用保存堆。</p><p>以小根堆为例</p><p>down操作：把一个大数往下移，up操作，把小数往上移</p><blockquote><p>维护一个数组集合, heap[size]表示最后一个，heap[1]表示第一个即堆顶</p><ul><li>插入一个数         heap[++size]=x; up(size);</li><li>求集合中的最小值    heap[1];</li><li>删除集合中的最小值  heap[1]=heap[size]; size—; down(1);</li><li>删除任意一个数      heap[k]=heap[size]; size—; down(k); up(k);</li><li>修改任意一个元素    heap[k]=x; down(k); up(k);</li></ul></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1// ph[k]存储第k个插入的点在堆中的位置// hp[k]存储堆中下标是k的点是第几个插入的// ph[k]=j, hp[j]=k, 二者是相反的int h[N],ph[N],hp[N],idx;void heap_down(int a,int b){    swap(ph[hp[a]],ph[hp[b]]);    swap(hp[a],hp[b]);    swap(h[a],h[b]);}void down(int u){int t=u;  // t 表示值最小的编号    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) // 判断左儿子        t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) // 判断右儿子        t = 2*u+1;    if(u != t)  // t 不是本身，即 u 与两个儿子相比不是最小的    {        heap_swap(u,t);        down(t);    }}void up(int u){    while(u/2 &amp;&amp; h[u] &lt; h[u/2])    {        heap_swap(u, u/2);        u &gt;&gt;= 1;    }}// 最后一层不用downfor(int i=n/2; i; i--)  down(i);  // 建堆 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆的应用：<strong>堆排序</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int h[N],idx;void down(int u){    int t=u;   // 三个点的最小值    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) t=2*u+1;    if(t!=u)    {        swap(h[u],h[t]);        down(t);    }}int main(){    int n,m; scanf("%d%d",&amp;n,&amp;m);    idx=n;    for(int i=1; i&lt;=n; i++)  scanf("%d",&amp;h[i]);    for(int i=n/2; i; i--) down(i);    while (m -- )    {        printf("%d ",h[1]);        h[1]=h[idx]; idx--; // 取出堆顶        down(1);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三章-搜索与图论"><a href="#第三章-搜索与图论" class="headerlink" title="第三章 搜索与图论"></a>第三章 搜索与图论</h2><h3 id="3-1-存图方式"><a href="#3-1-存图方式" class="headerlink" title="3.1 存图方式"></a>3.1 存图方式</h3><h4 id="3-1-1-vector存图"><a href="#3-1-1-vector存图" class="headerlink" title="3.1.1 vector存图"></a>3.1.1 vector存图</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;node&gt; G[N];G[u].push_back(v); // 加边for(int i=0;i&lt;G[x].size();i++){    int y=G[x][i]; // 遍历边 x-&gt;y}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-邻接表"><a href="#3-1-2-邻接表" class="headerlink" title="3.1.2 邻接表"></a>3.1.2 邻接表</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 对于每个点k，开一个单链表，存储k所有可以走到的点// h[k] 存储这个单链表的头结点// e[k] 一条边的终点// w[k] 存储边的权值// ne[k] 表示下一个点的下标，next指针// idx 存储结点编号int h[N], e[N], w[N], ne[N], idx;// 添加一条边a-&gt;b，权值为c，头插法void add(int a, int b, int c){    e[idx] = b, ne[idx] = h[a], w[idx]=c, h[a] = idx ++ ;}// dfs遍历int dfs(int u){    st[u] = true; // st[u] 表示点u已经被遍历过    for (int i = h[u]; i != -1; i = ne[i])  // 找以 u 为起点的边    {        int j = e[i];    // 这条边的起点为 u ，终点为 j        if (!st[j]) dfs(j);    }}// bfs遍历queue&lt;int&gt; q;st[1] = true; // 表示1号点已经被遍历过q.push(1);while (q.size()){    int t = q.front();  q.pop();    for (int i = h[t]; i != -1; i = ne[i])    {        int j = e[i];        if (!st[j])        {            st[j] = true; // 表示点j已经被遍历过            q.push(j);        }    }}// 初始化idx = 0;memset(h, -1, sizeof h);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h1><h2 id="第一章-动态规划"><a href="#第一章-动态规划" class="headerlink" title="第一章 动态规划"></a>第一章 动态规划</h2><h3 id="1-数字三角形"><a href="#1-数字三角形" class="headerlink" title="1 数字三角形"></a>1 数字三角形</h3><h3 id="2-最长上升子序列"><a href="#2-最长上升子序列" class="headerlink" title="2 最长上升子序列"></a>2 最长上升子序列</h3><h3 id="3-背包模型"><a href="#3-背包模型" class="headerlink" title="3 背包模型"></a>3 背包模型</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="1-网络流"><a href="#1-网络流" class="headerlink" title="1 网络流"></a>1 网络流</h2><h3 id="1-1-网络流相关概念"><a href="#1-1-网络流相关概念" class="headerlink" title="1.1 网络流相关概念"></a>1.1 网络流相关概念</h3><p>==流网络==：</p><p><img src="D:\Desktop\算法\进阶\图论\网络流.jpg" alt="网络流"> </p><ul><li>s: 源点</li><li>t：汇点</li><li>容量：边 $uv$ 能通过的最大流量，c(u,v)</li><li>流量：边 $uv$ 实际通过的流量，f(u,v)</li></ul><p>==可行流 f== (feasible flow 不考虑反向边)</p><ol><li><p>须满足容量限制： $0\le f(u,v)\le c(u,v)$;</p></li><li><p>流量守恒,对除s、t以外的点，流入等于流出： $\forall_x \in V\setminus s\ and\ t, \sum \limits_{(v,x)\in E}f(v,x)=\sum \limits_{(x,v)\in E}f(x,v)$ </p></li></ol><p>==净流量==：从源点流入的总流量，$|f|= \sum  \limits_{(s,v)\in E} f(s,v)-\sum \limits_{(v,s)\in E} f(v,s) $  </p><p>==最大流==：流量值最大的可行流，<strong>最大可行流</strong>(Maximum Flow)。</p><p>==残留网络 G~f~==：对流网络的某一条可行流来说,残留网络包括以下：</p><ul><li><p>点和边：$V_f=V,E_f=E\ and\ E的反向边 $</p></li><li><p>原始边的流量：$c’(u,v) =c(u,v)-f(u,v),\ \ (u,v)\in E $ </p></li><li>反向边的流量：$c’(v,u)=f(u,v),\ \ (v,u)\in E$  </li></ul><blockquote><p><strong>定理</strong>：若f是原网络G的可行流，f’是G~f~的可行流，则f+f’是原流网络G的一个可行流。</p><p>证明：</p><ol><li>容量限制：<ul><li>对于正向边$f(u,v)$: $0\le f’(u,v)\le c’(u,v)=c(u,v)-f(u,v)$ ,然后经过移项可证</li><li>对于反向边$f’(u,v)$: $0\le f’(u,v)\le c’(u,v)= f(v,u)=c(u,v)$, 所以 $f(v,u)-f’(u,v) \ge 0$ 且 $\le c(u,v)$ 得证</li></ul></li><li>流量守恒：<ul><li>$|f+f’|=|f|+|f’|$   </li></ul></li></ol></blockquote><p>==增广路径==(augmenting path)：在残留网络沿着容量大于零的边走能到达汇点的路径。</p><blockquote><p><strong>定理</strong>：若G~f~不存在增广路径/可行流，则 f 为 G 的最大流。</p><p>证明在<a href="#max-flow min-cut theorem">最大流最小割定理</a></p></blockquote><p>==割==(cut)：把点集 V 分成两部分 S 和 T，($S\cup T=V\ 且 \ S\cap T=\emptyset $)，源点 $s\in S$,汇点 $t\in T$ ,划分的结果就是一个割，记作 $CUT(S,T)$，共有 2^n-2^ 种划分方式。</p><ul><li><p><strong>割边</strong>：如果一条弧的两个顶点一个属于顶点集S一个属于顶点集T，该弧为割 $CUT(S,T)$ 的一条割边</p></li><li><p><strong>正向割边</strong>：从集合 S 指向集合 T 的割边</p></li><li><p><strong>逆向割边</strong>：从集合 T 指向集合 S 的割边</p></li><li><p><strong>割的容量</strong>：所有正向割边的流量之和，$c(S,T)=\sum \limits_{u\in S} \sum \limits_{v\in T} c(u,v)$ </p></li><li><p><strong>割的流量</strong>：所正向割边的流量和减所有逆向割边的流量和，$f(S,T)=\sum \limits_{u \in S} \sum \limits_{v\in T}f(u,v)-\sum \limits_{u \in S} \sum \limits_{v\in T}f(v,u)$ </p><blockquote><p>定理：对任意一个割，$f(S,T)\le c(S,T)$ </p><p>证明：利用放缩，$f(S,T)\le \sum \limits_{u \in S} \sum \limits_{v\in T}f(u,v)\le \sum \limits_{u\in S} \sum \limits_{v\in T} c(u,v)=c(S,T)$ </p><p>定义 $f(X,Y)=\sum \limits_{u \in X} \sum \limits_{v\in Y}f(u,v)-\sum \limits_{u \in X} \sum \limits_{v\in Y}f(v,u)$，所以 </p><ul><li>$f(X,Y)=-f(Y,X)$ </li><li>$f(X,X)=0$ </li><li>$f(Z,X\cup Y)=f(Z,X)+f(Z,Y)\ \ \  X\cap Y=\emptyset $ </li></ul><p>定理：割的流量等于净流量， $f(S,T)=|f|$ </p><p>证明：</p><script type="math/tex; mode=display">\begin{align*}f(S,V)&=f(S,S)+f(S,T)\\f(S,T)&=f(S,V)-f(S,S)\\&= f(S,V)\\&= f({s},V)+f(S\setminus s,V)， \left \{S\setminus s \right \} 是没有s和t的点的集合，由于流量守恒f(S\setminus s,V)=0\\&=f(s,V)\\&=|f|\end{align*}</script><p>所以还可以得到 $|f|\le c(S,T)$，净流量取小于等于割的容量</p></blockquote></li></ul><p>==最大流-最小割定理==(max-flow min-cut theorem):下面三个命题是等价的</p><ol><li>可行流 f 是最大流</li><li>可行流 f 的残留网络G~f~中不存在增广路</li><li>存在一个割 $CUT(S,T)，|f|=c(S,T)$ </li></ol><blockquote><p>1$\Longrightarrow $2  <span id="max-flow min-cut theorem"> </span> </p><p>证明：反证，假设还存在一个增广路 f’，由于G~f~的能量守恒</p><p>​    |f+f’|=|f|+|f’|,所以 f 不是最大流，与命题1矛盾。</p><p>2$\Longrightarrow $3</p><p>证明：在G~f~不存在增广路的情况下构造一个割，使之|f|=c(S,T)</p><p>定义S为，从 G~f~ 的源点 s 出发，沿容量大于0的边能到达的所有点，显然不能到达汇点 t，那么 $T=V\setminus S, S\cup T=V$,所以这种划分是原网络 G 的一个割CUT(S,T)。</p><p>对于这个割，正向割边流量为该边容量，逆向割边流量为0。</p><script type="math/tex; mode=display">\begin{align*}|f| &=\sum \limits_{u\in S} \sum \limits_{v\in T} f(u,v)-\sum \limits_{u\in S} \sum \limits_{v\in T} f(v,u)\\&=\sum \limits_{u\in S} \sum \limits_{v\in T} f(u,v)\\&=c(S,T) \ \ \ \ 得证\end{align*}</script><p>3$\Longrightarrow $1</p><p>证明：已知任何一个流 $|f|\le c(S,T)$，所以最大流也 $\le c(S,T)$ </p><p>​    3中，$|f|=c(S,T)$ , 所以 $|f|\ge最大流$ </p><p>​    又显然任何一个流都小于等于最大流, 夹逼得证，还能说明这个割是最小割，如下定理</p><p>定理：最大流等于最小割</p><p>证明：由3可知，最小割 $\le$ c(S,T) = |f| $\le$ 最大流，</p><p>​    而最大流 $\le$ 最小割，所以最大流等于最小割</p></blockquote><h3 id="1-2-求最大流"><a href="#1-2-求最大流" class="headerlink" title="1.2 求最大流"></a>1.2 求最大流</h3><p>使用Ford-Fulkerson方法 即增广路方法 简称FF方法。</p><p>开始，对于所有结点 $f(u,v)=f(v,u)=0,\ \ u,v\in V$，给出的初始流值为0。在每一次迭代中，将 G 的流值增加，方法就是在残留网络　G~f~ 中寻找一条增广路径（一般用 BFS 算法遍历残留网络中各个结点，以此寻找增广路径），然后在增广路径中的每条边都增加等量的流值，这个流值的大小就是增广路径上的最大残余流量，反向边减去流量。重复这一过程，直到残余网络中不再存在增广路径为止。最大流最小切割定理将说明在算法终结时，该算法获得一个最大流。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Ford-Fulkerson(G,s,t)伪代码:for each edge(u,v) 属于 E（G）f[u,v]=0  f[v,u]=0 // 初始化流量为 0// 根据最大流最小割定理，当不再有增广路径时，流 f 就是最大流while there exists a path p from s to t in the residual network G_f    cf(p)=min{cf(u,v):(u,v)is in p}  // cf(p)为该路径的残余容量    for each edge (u,v) in p    f[u,v]=+cf(p)  //为该路径中的每条边中注入刚才找到到的残余容量        f[v,u]=-cf(p)   //反向边注入反向流量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-1-EK算法"><a href="#1-2-1-EK算法" class="headerlink" title="1.2.1 EK算法"></a>1.2.1 EK算法</h4><p><strong>存图方式</strong>：邻接表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点int h[N], e[N], ne[N], idx;// 添加一条边a-&gt;bvoid add(int a, int b){    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;}// 遍历方式，DFSint dfs(int u){    st[u] = true; // st[u] 表示点u已经被遍历过    for (int i = h[u]; i != -1; i = ne[i])    {        int j = e[i];        if (!st[j]) dfs(j);    }}// 遍历方式，BFSqueue&lt;int&gt; q;st[1] = true; // 表示1号点已经被遍历过q.push(1);while (q.size()){    int t = q.front();    q.pop();    for (int i = h[t]; i != -1; i = ne[i])    {        int j = e[i];        if (!st[j])        {            st[j] = true; // 表示点j已经被遍历过            q.push(j);        }    }}// 初始化idx = 0;memset(h, -1, sizeof h);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-Dinic算法"><a href="#1-2-2-Dinic算法" class="headerlink" title="1.2.2 Dinic算法"></a>1.2.2 Dinic算法</h4><h4 id="1-2-3-ISAP算法"><a href="#1-2-3-ISAP算法" class="headerlink" title="1.2.3 ISAP算法"></a>1.2.3 ISAP算法</h4>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is love</title>
      <link href="/uncategorized/what-is-love/"/>
      <url>/uncategorized/what-is-love/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
