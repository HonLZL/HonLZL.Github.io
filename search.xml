<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Acwing竞赛题解</title>
      <link href="/ti-jie/acwing-jing-sai-ti-jie/"/>
      <url>/ti-jie/acwing-jing-sai-ti-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="DP-4078-01串"><a href="#DP-4078-01串" class="headerlink" title="DP: 4078.01串"></a><a href="https://www.acwing.com/problem/content/4081/">DP: 4078.01串</a></h3><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/4078_01串.png" alt="image-20211122072829201"></p><p>上述题目可以转化为长度在 [l,r] 范围内连续 1 个数都为 $k$ 的数量。</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/202111220826779.png" alt="img"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100005</span><span class="token punctuation">,</span>mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span>k<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        <span class="token keyword">else</span>  f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">// 相减后可能为负，因此要加模取模</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分-思维：4080-第k个数"><a href="#二分-思维：4080-第k个数" class="headerlink" title="二分+思维：4080.第k个数"></a><a href="https://www.acwing.com/problem/content/4083/">二分+思维：4080.第k个数</a></h3><p>给定一个 $n×m$ 的方格矩阵，每个方格内都有一个整数元素。其中第 $i$ 行第 $j$ 列的方格中的元素为 $i×j$（行和列都从 1 开始编号）。现在，需要你将这 $n×m$ 个整数按照非严格单调递增的顺序一一写出。</p><p>请问，你写出的第 $k$ 个整数是多少。 $(1≤n,m≤5×105，1≤k≤n×m。)$ </p><p>步骤1：给定一个数 $x$ ，判断能否知道它处于第几个位置。</p><p>是可以的，枚举每一行，当在第 $i$ 行时，这行不大于它的数有 $j$ 个，$j$ 满足 $i*j\le x，j\le \left \lfloor \frac{x}{i}\right \rfloor $。所以 $n×m$ 矩阵中不大于 $x$ 的有 $\sum_{i=1}^{n} \le min(\left \lfloor \frac{x}{i}\right \rfloor,\ \ m)$。</p><p>步骤二：$x$ 最大能到 n×m，所以枚举 $x$ 是显然不行的，但是可以发现假设 $x$ 就是答案，那么小于 $x$ 的数必然小于 $k$，和大于 $x$ 的数必然大于 $k$，因此可以使用二分。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool check(ll x){    ll sum=0;    for(int i=1;i&lt;=n;i++)        sum+=min(x/i,m);    return sum&lt;k;}if(k==1)  { cout&lt;&lt;1&lt;&lt;endl; return 0; }  ll low=1,top=n*m;while(low+1!=top) // 特例特判{    ll mid=low+top&gt;&gt;1;     if(check(mid))  low=mid;     else  top=mid;}cout&lt;&lt;top&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DP-背包-4081-最多0选数"><a href="#DP-背包-4081-最多0选数" class="headerlink" title="DP 背包: 4081.最多0选数"></a><a href="https://www.acwing.com/problem/content/4084/">DP 背包: 4081.最多0选数</a></h3><p>给定 $n$ 个整数 $ a_1,a_2,…,a_n$。请你从中选取<strong>恰好</strong> $m$ 个数，要求选出的数的乘积的末尾 0 的数量尽可能多。请输出末尾 0 的最大可能数量。</p><p>$(1≤n≤200，1≤m≤n，1≤a_i≤10^{18})$ </p><p>体积为 选出的个数，重量为 5 的个数，价值为 2 的个数，<strong>二维费用背包</strong>。</p><p>f[i,j,k] 表示从前 i 个数中选 j 个数，5 的个数为 k，2 的最大个数。限定两个求第三个。</p><p>一个 $a_i$ 中 5 的个数最多为 25 个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 保证恰好选 m 个</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll t<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> a2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> a2<span class="token operator">++</span><span class="token punctuation">,</span>t<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> a5<span class="token operator">++</span><span class="token punctuation">,</span>t<span class="token operator">/=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>a5<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>a5<span class="token punctuation">]</span><span class="token operator">+</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>m<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -竞赛 -题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EnglishWords</title>
      <link href="/ying-yu/englishwords/"/>
      <url>/ying-yu/englishwords/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>coordinate  n.坐标；套装； v.协调；</p><p>scenario    n.方案；设想</p><p>inclusive   a.包含的</p><p>cutoff      n.界限</p><p>unidirectional a.单向的</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客竞赛题解</title>
      <link href="/ti-jie/niu-ke-ti-jie/"/>
      <url>/ti-jie/niu-ke-ti-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/24998/C">最大边权和</a></p><p>给一张带权值的有向图，求从任意点出发不重复经过点，得到的最大权值和。</p><p>输入点个数 n ，边个数 m。然后 m 行 u、v、w 表示 u 和 v 之间有一条权值为 w 的边。</p><blockquote><p>先看一维的，给定一个数组，求最大字段和。</p><p>方法一：求前缀和，记录前面 sum[i] 最小的一个，枚举 i 后面的最大的 减去最小的即可。</p><p>方法二：DP。 f[i]=max(f[i-1]+a[i],a[i])</p></blockquote><p>因此延伸考虑 DP。从用 <strong>拓扑排序</strong> 的方式 dp，一直到终点，每次将度入度为 0 的点入队，然后用该点更新它所能到达的点。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment">// 入度为 0 的点入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// x → y</span>            f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -竞赛 -题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-基础</title>
      <link href="/suan-fa/suan-fa-bi-ji-ji-chu/"/>
      <url>/suan-fa/suan-fa-bi-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-基础算法"><a href="#第一章-基础算法" class="headerlink" title="第一章 基础算法"></a>第一章 基础算法</h2><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h3><h4 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/快速排序.jpg" alt="img"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/第k小.jpg" alt="img"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/归并排序.jpg" alt="img"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二分"><a href="#2-二分" class="headerlink" title="2 二分"></a>2 二分</h3><p><strong>整数二分</strong>：分成两块，一左一右，low一直位于作左边，top一直位于右边，最终low在左边块最右，top在右边那块最左边。</p><p>注：首先要确保 $low$ 和 $top$ 处于不同的区域，当在同一区域或者只存在一个区域时要特判，特判很简单，什么时候会处于同一个区域呢，当然是只有一个解的时候。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(low+1!=top){int mid=low+top&gt;&gt;1;    if(check(mid)) low=mid;  // low始终在ok的一块    else top=mid;     // top始终在不符合的那块}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小数二分</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(top-low&gt;exp){    double mid=(low+top)/2;    if(check(low)) top=mid;    else low=mid;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-高精度"><a href="#3-高精度" class="headerlink" title="3 高精度"></a>3 高精度</h3><h4 id="3-1-大数加法"><a href="#3-1-大数加法" class="headerlink" title="3.1 大数加法"></a>3.1 大数加法</h4><p>将数存在数组里面，数组倒序储存方便计算。</p><p>思想是模拟。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_add(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||i&lt;B.size();i++)    {        if(i&lt;A.size()) t+=A[i];        if(i&lt;B.size()) t+=B[i];        res.push_back(t%10);        t/=10;    }    if(t) res.push_back(t);   // 最后一位也可能进位    return res;}//调用vector&lt;int&gt; ans=big_add(A,B);for(int i=ans.size()-1;i&gt;=0;i--)  cout&lt;&lt;ans[i];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-大数减法"><a href="#3-2-大数减法" class="headerlink" title="3.2 大数减法"></a>3.2 大数减法</h4><p>计算 A-B，默认 A&gt;B，如果 A&lt;B，则去计算 -(B-A).</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_sub(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size();i++)    {        t+=A[i];        if(i&lt;B.size()) t-=B[i];        if(t&gt;=0) res.push_back(t),t=0;   // 不用借位        else res.push_back(t+10),t=-1;  // 借位    }    while(res.size()&gt;1&amp;&amp;res.back()==0) res.pop_back(); // 去前导零    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-大数乘法"><a href="#3-3-大数乘法" class="headerlink" title="3.3 大数乘法"></a>3.3 大数乘法</h4><p>一般是一个大数乘一个小数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||t;i++)    {        if(i&lt;A.size())  t+=A[i]*b;        res.push_back(t%10);        t/=10;    }    while(res.size()&gt;1&amp;&amp;res.back()==0)   // 去前导零        res.pop_back();    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-大数除法"><a href="#3-4-大数除法" class="headerlink" title="3.4 大数除法"></a>3.4 大数除法</h4><p>一般是一个大数 ÷ 一个小数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; ans;  // 商int y=0;   // 余数void div(vector&lt;int&gt; A,int b)  // A 还是倒着存{    y=0;for(int i=A.size()-1;i&gt;=0;i--)    {        y=y*10+A[i];        res.push_back(y/b);        y%=b;    }    reverse(ans.begin(),ans.end());    while(ans.size()&gt;0&amp;&amp;ans.back()==0)         ans.pop_back();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-压位"><a href="#3-5-压位" class="headerlink" title="3.5 压位"></a>3.5 压位</h4><p>由于数组存的数是int类型，所以只存个位数太过浪费。所以考虑将几个数合并成一位存储。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int power=3,base=1000; // 需要同时改vector&lt;int&gt; big(string s)  // 将字符串大数转化成数组压位的大数{    vector&lt;int&gt; A;    reverse(s.begin(),s.end());  // 调整为个位在前    int i,tem=0,w=1;    for(i=0;i&lt;s.size();i++)    {        if(i%power==0&amp;&amp;i)        {            A.push_back(tem);  tem=0;            w=1;        }        tem+=w*(s[i]-'0');  w*=10;    }    if(w!=1) A.push_back(tem);    return A;}bool cmp(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B) // 和普通高精一样{    if(A.size()==B.size())    {        for(int i=A.size()-1;i&gt;=0;i--)        {            if(A[i]&gt;B[i]) return 1;            else if(A[i]&lt;B[i]) return 0;        }        return 1;    }    if(A.size()&gt;B.size()) return 1;    return 0;}vector&lt;int&gt; add(vector&lt;int&gt; &amp;A ,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; C;    int la=A.size(), lb=B.size();    int l=max(la,lb);    int t=0;    for(int i=0;i&lt;l;i++)    {        int tem=0;        if(i&lt;la) tem+=A[i];        if(i&lt;lb) tem+=B[i];        C.push_back(tem+t);        t = C[i]/base;     // 进位        C[i] %= base;    }    if(t) C.push_back(t);    return C;}vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; C;    int t=0;  // 判断是否有借位    for(int i=0;i&lt;A.size();i++)  // A&gt;=B    {        int tem=A[i]-t;  t=0;        if(i&lt;B.size()) tem-=B[i];        if(tem&lt;0)        {            tem+=base; t=1;        }        C.push_back(tem);    }    while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back(); // 去前导零    return C;}void print(vector&lt;int&gt; &amp;A){    int t=A.size();    cout&lt;&lt;A[t-1];    for(int i=t-2;i&gt;=0;i--)        cout&lt;&lt;setw(power)&lt;&lt;setfill('0')&lt;&lt;A[i];    cout&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-前缀和与差分"><a href="#4-前缀和与差分" class="headerlink" title="4 前缀和与差分"></a>4 前缀和与差分</h3><p>前缀和与差分是相反的过程。</p><h4 id="4-1-前缀和"><a href="#4-1-前缀和" class="headerlink" title="4.1 前缀和"></a>4.1 前缀和</h4><p><strong><em>可以快速求出数组某区间内的数值和</em></strong></p><p>一维数组：sum[i]=sum[i-1]+a[i]</p><p>二位数组：sum[i,j]=sum[i-1,j]+sum[i,j-1]-sum[i-1,j-1]+a[i,j]</p><h4 id="4-2-差分"><a href="#4-2-差分" class="headerlink" title="4.2 差分"></a>4.2 差分</h4><p><strong><em>可以快速处理区间同时加减一个数的问题</em></strong></p><p>一维数组：</p><p>已知数组 $a_i$ , 构造 $a_i=b_1+b_2+···+b_i$，即 b 数组前缀和是 a</p><p>通过差分构造: b[i]=a[i]-a[i-1]</p><p>在[l,r]区间加一个数 c 时：b[l]+=c,b[r+1]-=c 。</p><p>通过求前缀和得出 操作后的 a 数组。</p><p>这是离线算法，时间复杂度O(n), 树状数组是在线算法。</p><p>二维数组：</p><p>构造差分数组：b[i,j]=a[i,j]-a[i-1,j]-a[i,j-1]+a[i-1,j-1]</p><p>在(x~1~,y~1~)和(x~2~,y~2~)构成的矩形矩阵内加 c：</p><p>对差分数组操作：b[x~1~,y~1~]+=c, b[x~1~+1,y~2~+1]+=c, b[x~1~,y~2~+1]-=c, b[x~2~+1,y~1~]+=c</p><p>(后续补图)</p><p>最后通过二维数组前缀和求出改变后的数组</p><h3 id="5-离散化"><a href="#5-离散化" class="headerlink" title="5 离散化"></a>5 离散化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(dif,dif+cnt);    // 排序int m=unique(dif,dif+cnt)-dif;   // 去重，m 返回不重复的数int p=lower_bound(dif,dif+m,x)-dif;  // 二分取离散化后 x 映射的位置，后面就用这个位置 p 代表 x 了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第二章-数据结构"><a href="#第二章-数据结构" class="headerlink" title="第二章 数据结构"></a>第二章 数据结构</h2><h3 id="1-链表"><a href="#1-链表" class="headerlink" title="1 链表"></a>1 链表</h3><p><strong>单链表</strong></p><p>结构体形式：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{int val;node *next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟单链表: 用邻接表,可以用来存图和树</p><ul><li><p>head：头结点的下标，初始为 -1</p></li><li><p>e[N]：结构体中的 val，e[i] 表示结点 i 的值</p></li><li><p>ne[N]：结构体中的 next 指针，ne[i]表示结点 i 的next指针</p></li><li><p>idx：下表索引，第 idx 个插入链表的</p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int head=-1,e[N],ne[N],idx;void add(int x) // 添加值为 x 的结点,头插法{    e[idx]=x;    ne[idx]=head;    head=idx++;}void add_k(int k,int x)  // 插入下表为k的后面{    e[idx]=x;    n[idx]=ne[k];    ne[k]=idx++;}void dele_k(int k,int x) // 将下标为k的后面那个点删去{    ne[k]=ne[ne[k]];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双链表</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{    int val;    node *nextL,*nextR;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟双链表</p><p>l[i],r[i] 表示 结点 i 的左右指针</p><p>0 表示左端点，1 表示右端点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int e[N],l[N],r[N],idx;r[0]=1; l[1]=0;  idx=2;  // 初始化，互相指void add(int k,int x) // 下表是 k 的右边插入 x{    e[idx]=x;    r[idx]=r[k];   // 新点右指针指向右边的点    l[idx]=k;      // 新点的左指针指向 k    l[r[k]]=idx;  // 右边的做指针指向新插入的点    r[k]=idx++;   // k 的右指针指向新插入的点}void remove(int k)  // 删去下表为 k 的点{    r[l[k]]=r[k];    l[r[k]]=l[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-模拟栈和队列"><a href="#2-模拟栈和队列" class="headerlink" title="2 模拟栈和队列"></a>2 模拟栈和队列</h3><p>先进后出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stk[N],tt=0;stk[++tt]=x;  // 插入tt--;  //弹出tt&gt;0   //不空,否则是空的stk[tt]  // 是栈顶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈的应用：表达式求值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=1000005;// 中序遍历int stk1[N],tt1;char stk2[N];    // 栈里的运算符运算级是递增的int tt2; // 还可以加新的运算符unordered_map&lt;char,int&gt; mp{{'+',1},{'-',1},{'*',2},{'/',2}};void eval(){    // 从后往前运算    int a=stk1[tt1--];  // 运算符后面的数    int b=stk1[tt1--];  // 运算符前面的数    char c=stk2[tt2--];    int res=0;    if(c=='+') res=b+a;    else if(c=='-')  res=b-a;    else if(c=='*')  res=b*a;    else res=b/a;    stk1[++tt1]=res;}int main(){    string s;  cin&gt;&gt;s;    for(int i=0;i&lt;s.length();i++)    {        if(isdigit(s[i]))        {            int j=i,t=0;            while(isdigit(s[j])&amp;&amp;j&lt;s.length())            {                t=t*10+s[j++]-'0';            }            stk1[++tt1]=t;            i=j-1;        }        else if(s[i]=='(') stk2[++tt2]='(';        else if(s[i]==')')        {            while(stk2[tt2]!='(')  eval();            tt2--;  // 弹出左括号        }        else  // 除括号数字以外的运算符        {            // 当前运算符小于栈顶，说明左右子树都遍历完了，此时可以计算出前面的值            while(tt2&amp;&amp;mp[s[i]]&lt;=mp[stk2[tt2]])                eval();            stk2[++tt2]=s[i];        }    }    while(tt2) eval();    cout&lt;&lt;stk1[tt1]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先进先出  $\gets $hh <em> </em> <em> </em> tt$\gets$，从 tt 处加，从 hh 处出</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int q[N],hh,tt=-1;  // hh 是队头，tt是队尾q[++tt]=x;  // 插入队列hh++;  // 弹出hh&lt;=tt  // 不空 否则是空的q[hh]  // 队头q[tt]  // 队尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-单调栈和单调队列"><a href="#3-单调栈和单调队列" class="headerlink" title="3 单调栈和单调队列"></a>3 单调栈和单调队列</h3><p><strong>单调栈</strong>：栈内的元素是具有单调性的</p><p>应用于：找数组中一个数的左边或者右边第一个比它大或者小的数</p><p>例题：<a href="https://www.acwing.com/problem/content/832/">单调栈</a> 给定N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int a[N],stk[N],tt;int main(){    int n;  cin&gt;&gt;n;    for(int i=0;i&lt;n;i++)    {        int x;   cin&gt;&gt;x;        while(x&lt;=stk[tt]&amp;&amp;tt)             tt--;    // 弹出栈内比当前元素大的，保证栈的单调递增的        if(tt==0)  cout&lt;&lt;-1&lt;&lt;" "&lt;&lt;endl;        else cout&lt;&lt;stk[tt]&lt;&lt;" "&lt;&lt;endl;        stk[++tt]=x;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单调队列</strong>：队列元素是单调的，是双端队列</p><p>应用于<strong>滑动窗口</strong>求最值</p><p>例：<a href="https://www.acwing.com/problem/content/156/">滑动窗口</a>，求窗口大小为 k 的最大和最小值</p><p>维护两个单调队列</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 求最小值模板int q[N],hh,tt=-1; // 队列保存下标int ans[N],cnt;// 维护单调性，将队列里后面的大于当前数的删去，去尾while(x&lt;=a[q[tt1]]&amp;&amp;hh&lt;=tt) tt--;// 删头,与 i 距离超过 k 的要删去if(i-q[hh]&gt;=k&amp;&amp;hh&lt;=tt) hh++;q[++tt]=i;  // 将该元素入队if(i&gt;=k-1)  ans[cnt++]=q[hh];  // 存入答案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-KMP"><a href="#4-KMP" class="headerlink" title="4 KMP"></a>4 KMP</h3><p>next[i]: 含义是以 i 为终点的最长后缀，从下标 0 开始，next[0]=-1，next[1]=0</p><p>字符串 p 的 next 值跟当前位无关，所以第 i 位匹配相等时 next[i+1]=j+1, 简写位 next[++i]=++j </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int nxt[N];   // p 要回退的位置void get_next(string p)  // 求模式串next{    nxt[0]=-1;    int i=0, j=-1; // i 为正在匹配的字符的位置，j 表示后缀长度    while(i&lt;p.length())    {        if(j==-1||p[i]==p[j])   nxt[++i]=++j; // 相等，后缀长度++        else  j=nxt[j];    // 回退了j,寻找更小的最大后缀    }}// s是长串，p 是短串是已知next的串void kmp(string s,string p)  {    int i=0,j=0;    int sl=s.length(),pl=p.length();    while(i&lt;sl)    {        if(j==-1||s[i]==p[j]) // 当前匹配成功，都往后移一位            i++, j++;        else  j=nxt[j];   // 匹配失败往前退，相当于向左挪短的串         if(j==p.length()) cout&lt;&lt;i-j&lt;&lt;" "; //输出匹配成功的起始下标    }}// 调用get_next(p);kmp(s,p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Trie树"><a href="#5-Trie树" class="headerlink" title="5 Trie树"></a>5 Trie树</h3><p>是一个能高效地存储和查找字符串集合的数据结构</p><p>建立树，就是向一个集合添加字符串的过程</p><p>查找字符串的数量和建立树类似</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/Trie树.jpg" alt="img"></p><p><a href="https://www.acwing.com/problem/content/837/">模板题</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int son[N][26];  // 当前结点的儿子，儿子最多有26个，因为小写字母只有26个int cnt[N];    // 打标记，以第 i 字母结尾的字符串的个数int idx;       // 初始化为0，根结点是0void insert(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0)    // p 下不存在儿子 u            son[p][u]=++idx;        p=son[p][u];   // 往下走    }    cnt[p]++;  // 个数+1}int query(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0) return 0;        p=son[p][u];    }    return cnt[p];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Trie 另一个应用：存储二进制数</p><p><a href="https://www.acwing.com/problem/content/145/">最大异或对</a></p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/202111151404479.jpg" alt="img"></p><h3 id="6-并查集"><a href="#6-并查集" class="headerlink" title="6 并查集"></a>6 并查集</h3><p>将两个集合合并； 询问两个元素是否在同一个集合中</p><p>基础并查集：<a href="https://www.acwing.com/problem/content/838/">模题合并集合</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;=n;i++)     p[i]=i;   // 初始化 p 数组，自成一派int find(int x)  // 返回 x 祖宗结点并路径压缩{return p[x]==x?x:p[x]=find(p[x]);}void merge(int x,int y) // 合并集合{    int u=find(x),v=find(y);    p[u]=v;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展应用：</strong> 维护并查集附加信息</p><p><a href="https://www.acwing.com/problem/content/839/">连通块数量</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 实时查询某元素所在集合中元素的数量// 在合并时记录，只维护根结点对应的 cntvoid merge(int x,int y){    int u=find(x),v=find(y);    if(u!=v)      {        p[u]=v;    // 将祖宗为 u 所在的集合合并到 v 所在的集合        cnt[v]+=cnt[u];   // 祖宗 v 的数量增加了    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展应用：维护当前点到根结点的距离</p><p><a href="https://www.acwing.com/problem/content/description/242/">食物链</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=50005;int p[N],ans,dis[N];int find(int x){    if(p[x]!=x)    {        int fa = find(p[x]);        dis[x] += dis[p[x]];        p[x] = fa;    }    return p[x];}int main(){    int n,m;  scanf("%d%d",&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++) p[i]=i;    while(m--)    {        int f,a,b;  scanf("%d%d%d",&amp;f,&amp;a,&amp;b);        if(a&gt;n||b&gt;n) {ans++; continue;}        int x=find(a);        int y=find(b);        if(f==1)        {            if(x==y&amp;&amp;(dis[b]-dis[a])%3) ans++;            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+3)%3;            }        }        else        {            if(a==b) ans++;            else if(x==y&amp;&amp;(dis[a]-dis[b]-1)%3)            {                ans++;            }            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+1+3)%3;            }        }    }    printf("%d",ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-堆"><a href="#7-堆" class="headerlink" title="7 堆"></a>7 堆</h3><p>堆是一棵完全二叉树，顶点取最值</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/堆.png" alt=""></p><p>由于编号为 i 的父结点的左结点为 2i，右结点为 2i+1，所以用保存堆。</p><p>以小根堆为例</p><p><strong>down操作</strong>：把一个大数往下移</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/202111151426489.jpg" alt="img"></p><p><strong>UP操作</strong>：把一个较小的数往上移</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/202111151431092.jpg" alt="img"></p><blockquote><p>维护一个数组集合, heap[size]表示最后一个，heap[1]表示第一个即堆顶</p><ul><li>插入一个数         heap[++size]=x; up(size);</li><li>求集合中的最小值    heap[1];</li><li>删除集合中的最小值  heap[1]=heap[size]; size—; down(1);</li><li>删除任意一个数      heap[k]=heap[size]; size—; down(k); up(k);</li><li>修改任意一个元素    heap[k]=x; down(k); up(k);</li></ul></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1// ph[k]存储第k个插入的点在堆中的位置// hp[k]存储堆中下标是k的点是第几个插入的// ph[k]=j, hp[j]=k, 二者是相反的int h[N],ph[N],hp[N],idx;void heap_down(int a,int b){    swap(ph[hp[a]],ph[hp[b]]);    swap(hp[a],hp[b]);    swap(h[a],h[b]);}void down(int u){int t=u;  // t 表示值最小的编号    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) // 判断左儿子        t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) // 判断右儿子        t = 2*u+1;    if(u != t)  // t 不是本身，即 u 与两个儿子相比不是最小的    {        heap_swap(u,t);        down(t);    }}void up(int u){    while(u/2 &amp;&amp; h[u] &lt; h[u/2])    {        heap_swap(u, u/2);        u &gt;&gt;= 1;    }}// 最后一层不用downfor(int i=n/2; i; i--)  down(i);  // 建堆 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆的应用：<strong>堆排序</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int h[N],idx;void down(int u){    int t=u;   // 三个点的最小值    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) t=2*u+1;    if(t!=u)    {        swap(h[u],h[t]);        down(t);    }}int main(){    int n,m; scanf("%d%d",&amp;n,&amp;m);    idx=n;    for(int i=1; i&lt;=n; i++)  scanf("%d",&amp;h[i]);    for(int i=n/2; i; i--) down(i);    while (m -- )    {        printf("%d ",h[1]);        h[1]=h[idx]; idx--; // 取出堆顶        down(1);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-哈希表"><a href="#8-哈希表" class="headerlink" title="8 哈希表"></a>8 哈希表</h3><p>储存结构：开放寻址法，拉链法。</p><p><strong>拉链法</strong>：将大数取模，将相同模的组成一个链表</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void insert(int x){    int k = (x%mod+mod)%mod; // mod 要选一个质数使得链尽可能短    e[idx]=x;    ne[idx]=h[k]; // h[k] 表示头结点    h[k]=idx++;}void query(int x){    int k=(x%mod+mod)%mod;    for(int i=h[k];i!=-1;i=ne[i]) // 在链中寻找    {        if(e[i]==x)  return 1;    }    return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开放寻址法</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int N=1e5+5,inf=0x3f3f3f3f;h[2*N];    mod=200003; // mod 选小于 N 但尽量大的质数memset(h,0x3f,sizeof(h));int query(int x){    int k=(x%mod+mod)%mod;    while(h[k]!=inf &amp;&amp; h[k]!=x)    {        k++;        if(k==N) k=0;  // 后面用完了，从起点重新找位置    }    return k;  // 存在则返回 k 的下标，不存在则返回一个空的下标}// 调用int k=query(x);if(op[0]=='I')  h[k]=x;else{    if(h[query(x)]!=inf) printf("Yes\n");    else printf("No\n");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串哈希</strong>：把一个字符串变成一个 p 进制数字，实现不同的字符串映射到不同的数字，即不同点字符串有不同的哈希值。。</p><p>对形如 $ c_1c_2c_3···c_{n-1}c_n $ 的字符串，采用Ascii码乘 P 的次方来计算哈希值。映射公式为：</p><script type="math/tex; mode=display">(A_1\times P^{n-1}+A_2\times P^{n-2}+···+A_{n-1}\times P^1+X_n\times P^0)\ \ mod\ \ Q\\Q=2^{64}</script><p>对一个字符串求哈希值：h[i+1]=h[i]*P+s[i]</p><p>某段字符串的哈希值: h[l,r]=h[r]-h[l-1]*P^r-l+1^ </p><p>区间和公式的理解: ABCDE 与 ABC 的前三个字符值是一样，只差两位，<br>乘上 P^2^ 把 ABC 变为 ABC00，再用 ABCDE - ABC00 得到 DE 的哈希值。</p><p>模板题：<a href="https://www.acwing.com/problem/content/843/">字符串哈希</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef unsigned long long ull;const int N = 1e5+5, P=131; //P 取131或13331，经验值ull h[N];  // 前i 字符串的哈希值ull p[N];int n,q;char s[N];ull get(int l,int r){    return h[r]-h[l-1]*p[r-l+1];}int main(){scanf("%d%d%s",&amp;n,&amp;q,s+1); // 要从 1 开始    p[0]=1;    for(int i=1;i&lt;=n;i++)    {        p[i]=p[i-1]*P;        h[i]=h[i-1]*P+s[i];  // 字符串变成了 P进制数    }    while(q--)    {        int l1,r1,l2,r2;        scanf("%d%d%d%d",&amp;l1,&amp;r1,&amp;l2,&amp;r2);        if(get(l1,r1)==get(l2,r2)) printf("Yes\n");        else printf("No\n");    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三章-搜索与图论"><a href="#第三章-搜索与图论" class="headerlink" title="第三章 搜索与图论"></a>第三章 搜索与图论</h2><h3 id="1-存图方式"><a href="#1-存图方式" class="headerlink" title="1 存图方式"></a>1 存图方式</h3><h4 id="1-1-vector存图"><a href="#1-1-vector存图" class="headerlink" title="1.1 vector存图"></a>1.1 vector存图</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;node&gt; G[N];G[u].push_back(v); // 加边for(int i=0;i&lt;G[x].size();i++){    int y=G[x][i]; // 遍历边 x-&gt;y}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-邻接表"><a href="#1-2-邻接表" class="headerlink" title="1.2 邻接表"></a>1.2 邻接表</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 对于每个点k，开一个单链表，存储k所有可以走到的点// h[k] 存储这个单链表的头结点// e[k] 一条边的终点// w[k] 存储边的权值// ne[k] 表示下一个点的下标，next指针// idx 存储结点编号int h[N], e[N], w[N], ne[N], idx;// 添加一条边a-&gt;b，权值为c，头插法void add(int a, int b, int c){    e[idx] = b, ne[idx] = h[a], w[idx]=c, h[a] = idx ++ ;}// dfs遍历int dfs(int u){    st[u] = true; // st[u] 表示点u已经被遍历过    for (int i = h[u]; i != -1; i = ne[i])  // 找以 u 为起点的边    {        int j = e[i];    // 这条边的起点为 u ，终点为 j        if (!st[j]) dfs(j);    }}// bfs遍历queue&lt;int&gt; q;st[1] = true; // 表示1号点已经被遍历过q.push(1);while (q.size()){    int t = q.front();  q.pop();    for (int i = h[t]; i != -1; i = ne[i])    {        int j = e[i];        if (!st[j])        {            st[j] = true; // 表示点j已经被遍历过            q.push(j);        }    }}// 初始化idx = 0;memset(h, -1, sizeof h);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2 DFS"></a>2 DFS</h3><p>n个数的全排列：<a href="https://www.acwing.com/problem/content/844/">排列数字</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void dfs(int t){    if(t==n)    {        for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;" ";        cout&lt;&lt;endl;        return;    }    for(int i=1;i&lt;=n;i++)    {        if(!vis[i])        {            vis[i]=1;    ans[t+1]=i;            dfs(t+1);    vis[i]=0;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-BFS"><a href="#3-BFS" class="headerlink" title="3 BFS"></a>3 BFS</h3><h3 id="4-拓扑排序"><a href="#4-拓扑排序" class="headerlink" title="4 拓扑排序"></a>4 拓扑排序</h3><p>记录入度，依次删度为0的点</p><h3 id="5-最短路"><a href="#5-最短路" class="headerlink" title="5 最短路"></a>5 最短路</h3><h4 id="5-1-Dijkstra"><a href="#5-1-Dijkstra" class="headerlink" title="5.1 Dijkstra"></a>5.1 Dijkstra</h4><p>Dijkstra朴素版：时间复杂度$ O(n^2) $ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int g[N][N];  // 存储每条边int dist[N];  // 存储1号点到每个点的最短距离bool st[N];   // 存储每个点的最短路是否已经确定// 求1号点到n号点的最短路，如果不存在则返回-1int dijkstra(){    memset(dist, 0x3f, sizeof dist);    dist[1] = 0;    for (int i = 0; i &lt; n - 1; i ++ )    {        int t = -1;     // 在还未确定最短路的点中，寻找距离源点最小的点        for (int j = 1; j &lt;= n; j ++ )            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))                t = j;        // 用t更新其他点的距离        for (int j = 1; j &lt;= n; j ++ )            dist[j] = min(dist[j], dist[t] + g[t][j]);        st[t] = true;    }    if (dist[n] == 0x3f3f3f3f) return -1;    return dist[n];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆优化版Dijkstra</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 结构体优先队列struct node{    int u,w;    bool operator &lt; (const node &amp;t)const // 小顶堆    {        return w &gt; t.w;    }}priority_queue&lt;node&gt; q;// pair 优先队列，先比较 firsttypedef pair&lt;int,int&gt; piipriority_queue&lt;pii, vector&lt;pii &gt;,greater&lt;pii &gt; &gt; q; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void add(int x,int y,int z){    e[idx]=y; w[idx]=z; ne[idx]=h[x]; h[x]=idx++;}void dijkstra(){    priority_queue&lt;node&gt; q;    q.push({1,0});    dis[1]=0;    while(!q.empty())    {        int u=q.top().u,ww=q.top().w;  q.pop();        //if(st[u]) continue;   st[u]=1;        if(dis[u]!=ww) continue;  // 两种方法节约时间        for(int i=h[u];i!=-1;i=ne[i])        {            int v=e[i];            if(dis[v]&gt;dis[u]+w[i])            {                dis[v]=dis[u]+w[i];                q.push({v,dis[v]});            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-Bellman-Ford"><a href="#5-2-Bellman-Ford" class="headerlink" title="5.2 Bellman-Ford"></a>5.2 Bellman-Ford</h4><p>求最多经过 k 条边能到达的最短路   O(nm)</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Edge  // 结构体直接存图{    int a,b;  //a -&gt; b    int w;  }edge[N];int dis[N],back[N];  // back 为备份的上一次 dis 数组void bellman_ford(){    memset(dis,0x3f,sizeof(dis));    dis[1]=0;    for(int i=0;i&lt;k;i++)    {        memcpy(back,dis,sizeof(dis));        for(int j=0;j&lt;m;j++)        {            int a=edge[j].a,b=e[j].b,w=e[j].w;            dis[b]=min(dis[b],back[a]+w); // 用back更新        }    }}if(dis[n]&gt;inf/2)   // 因为存在负权，inf可能被更新，不连通else cout&lt;&lt;dis[n];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-SPFA"><a href="#5-3-SPFA" class="headerlink" title="5.3 SPFA"></a>5.3 SPFA</h4><p>用于求带负权的最短路、求负环  O(m) 到 O(nm)</p><p>对BellmanFord的优化，用队列储存是否有必要更新</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int dis[N];bool st[N];  // 储存是否遍历过void spfa(){    memset(dis,0x3f,sizeof(dis));    queue&lt;int&gt; q;    q.push(1);  dis[1]=0;    while(!q.empty())  // 被更新的才有机会更新别人    {        int x=q.front();  q.pop();        st[x]=0;   // 代表 x 曾被更新，但还能被继续更新        for(int i=h[x];i!=-1;i=ne[i])        {            int y=e[i];            if(dis[y]&gt;dis[x]+w[i])            {                dis[y]=dis[x]+w[i];                if(!st[y])                {                    st[y]=1;                    q.push(y);  // y 被更新了，所以可以用它更新其他的                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断是否存在<strong>负环</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int cnt[N]; // 记录 i 的最短路边数，边数大于等于 n 说明存在负环bool spfa(){    queue&lt;int&gt; q;    for(int i=1;i&lt;=n;i++)  //有些点跟负环可能不连通，所以要全入队         q.push(i),st[i]=1;       while(!q.empty())    {        int x=q.front();  q.pop();        st[x]=0;        for(int i=h[x];i!=-1;i=ne[i])        {            int y=e[i];            if(dis[y]&gt;dis[x]+w[i])            {                dis[y]=dis[x]+w[i];                cnt[y]=cnt[x]+1;                if(cnt[y]&gt;=n) return true;  // 存在负环                if(!st[y])                {                    st[y]=1;   q.push(y);                }            }        }    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-Floyd"><a href="#5-4-Floyd" class="headerlink" title="5.4 Floyd"></a>5.4 Floyd</h4><p>用于多源最短路</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int k=1;k&lt;=n;k++)   // 记得先枚举中间点    {        for(int i=1;i&lt;=n;i++)        {            for(int j=1;j&lt;=n;j++)            {                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-最小生成树-MST"><a href="#6-最小生成树-MST" class="headerlink" title="6 最小生成树 MST"></a>6 最小生成树 MST</h3><h4 id="6-1-Prim"><a href="#6-1-Prim" class="headerlink" title="6.1 Prim"></a>6.1 Prim</h4><p>寻找离集合最近的点 t，加入集合，然后用 t 更新其他未在集合的点离集合的距离。 时间复杂度 $O(n^2)$ </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int dis[N];  // 距离集合最近的距离bool st[N];  // 标记是否在集合中int mp[N][N]; // 初始化为 infvoid prim(){    int ans=0;        for(int i=1;i&lt;=n;i++) dis[i]=mp[1][i]; // 设最初集合只有 1    st[1]=1;    for(int i=1;i&lt;n;i++)  // n-1 次循环    {        int t=-1;        for(int j=1;j&lt;=n;j++) // 寻找不在集合且距离集合最近的点            if(!st[j]&amp;&amp;(t==-1||dis[t]&gt;dis[j]))                t=j;        ans+=dis[t];        st[t]=1;   // 将点 t 加入集合        for(int j=1;j&lt;=n;j++)    // 更新点到集合的距离            dis[j]=min(dis[j],mp[t][j]);    }    if(ans&gt;inf/2) puts("impossible");    else  printf("%d",ans);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-Kruskal"><a href="#6-2-Kruskal" class="headerlink" title="6.2 Kruskal"></a>6.2 Kruskal</h4><p>先将权值边排序，选择端点不在同一集合的边并将两个端点加入集合，直到选择 $n-1$ 条边。若选不到 n-1 条边，说明没有mst</p><p>时间复杂度 $O(mlogn)$ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Edge{    int u,v,w;}edge[2*N];bool cmp(Edge x,Edge y){    return x.w&lt;y.w;}void kruskal(){    sort(edge,edge+m,cmp);    int cnt=0,ans=0;    for(int i=1;i&lt;=n;i++) p[i]=i;    for(int i=0;i&lt;m;i++)   // 枚举边    {        int a=edge[i].u,b=edge[i].v;        int x=find(a),y=find(b);        if(x!=y)   // 用并查集判断两个点是否在同一集合        {            cnt++;            p[x]=y;            ans+=edge[i].w;        }        if(cnt==n-1) break;    }    if(cnt==n-1) printf("%d",ans);    else printf("impossible");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-二分图"><a href="#7-二分图" class="headerlink" title="7 二分图"></a>7 二分图</h3><p>定义：无向图 $G=(V,E)$ 中顶点可以被分为两个不相交集合 A 和 B，并且 E 都是跨越组的形式。也就是说一条边的两个顶点不会在同一个集合。</p><blockquote><p>定理：一个图是二分图，当且仅当图中不含奇数环。</p><p>必要性证明：设奇数环 A-&gt;B-&gt;C-&gt;A</p><p>​    所以 AB，BC，CA 不在同一个集合，显然两个集合无法共存</p><p>​    所以二分图不含奇数环</p><p>必要性证明：可以构造出一个二分图</p></blockquote><p>必要性：由已知推出结论</p><p>充分性：由结论推出已知</p><h4 id="7-1-搜索染色染色法"><a href="#7-1-搜索染色染色法" class="headerlink" title="7.1 搜索染色染色法"></a>7.1 搜索染色染色法</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 将二分图的两个集合一个染 1，一个染 2bool dfs(int x,int c)  // x 染 c 色{    co[x]=c;    for(int i=h[x];i!=-1;i=ne[i])    {        int y=e[i];        if(co[y]==c) return 0;  // 变的两端颜色相同        if(co[y]==0)            if(!dfs(y,3-c))                return 0;    }    return 1;}int main(){    scanf("%d%d",&amp;n,&amp;m);    memset(h,-1,sizeof h);    while(m--)    {        int x,y;  scanf("%d%d",&amp;x,&amp;y);        add(x,y); add(y,x);  // 无向边    }    for(int i=1;i&lt;=n;i++) // 二分图不一定是连通的，所以要对每个点dfs    {        if(!co[i]&amp;&amp;!dfs(i,1))        {            cout&lt;&lt;"No"&lt;&lt;endl;            return 0;        }    }    cout&lt;&lt;"Yes"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-匈牙利算法"><a href="#7-2-匈牙利算法" class="headerlink" title="7.2 匈牙利算法"></a>7.2 匈牙利算法</h4><p>求二分图的最大匹配。</p><p>匈牙利时间复杂度：最坏是 $O(nm)$ ，但一般远小于。</p><p>是一个寻找最长增广路的过程</p><blockquote><p><strong>二分图的匹配</strong>：给定一个二分图 G，在 G 的一个子图 M 中，M 的边集 {E} 中的任意两条边都不依附于同一个顶点，则称 M 是一个匹配。</p><p>通俗的理解：二分图的一个集合是男生，另一个集合是女生，求能凑成最多情侣的对数。</p><p><strong>完美匹配</strong>：覆盖图中所有点的匹配。全部结成对，没有剩余</p><p><strong>二分图的最大匹配</strong>：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><p><a href="https://www.acwing.com/problem/content/863/">二分图的最大匹配</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;int,int&gt; pii;const int N=505,M=100005,inf=0x3f3f3f3f;int n1,n2,m,ans;int h[M],e[M],ne[M],idx;int match[N];   // 右边女孩 i 已经匹配到左边的 match[i] 了bool st[N];void add(int a,int b){    e[idx]=b; ne[idx]=h[a]; h[a]=idx++;}bool find(int x){    for(int i=h[x];i!=-1;i=ne[i])    {        int y=e[i];        if(!st[y])  // 还有机会选择 y        {            st[y]=1;  // 标记已经尝试了，这次不行的话注定无缘            if(match[y]==0||find(match[y]))            {                match[y]=x;   // x 与 y 匹配成功                return 1;            }        }    }    return 0;}int main(){    scanf("%d%d%d",&amp;n1,&amp;n2,&amp;m);    memset(h,-1,sizeof h);    while(m--)    {        int x,y;  scanf("%d%d",&amp;x,&amp;y);        add(x,y);   // 只存一条边    }    for(int i=1;i&lt;=n1;i++)    {        memset(st,0,sizeof(st));  // 右边每个都有机会与之结对        if(find(i))  ans++;    }    cout&lt;&lt;ans&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四章-数学"><a href="#第四章-数学" class="headerlink" title="第四章 数学"></a>第四章 数学</h2><h3 id="1-基础数学"><a href="#1-基础数学" class="headerlink" title="1 基础数学"></a>1 基础数学</h3><h4 id="1-1质数"><a href="#1-1质数" class="headerlink" title="1.1质数"></a>1.1质数</h4><p>只能被 1 和本身整除的数。1 不是质数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 判断是否为质数bool is_prime(int x){    if(x==1) return 0;    for(int i=2;i&lt;=x/i;i++)        if(x%i==0) return 0;    return 1;}// 分解质因数void divide(int x){    for(int i=2;i&lt;=x/i;i++)    {        if(x%i==0)        {            int s=0;            while(x%i==0)            {                x/=i;  s++;            }            printf("%d %d\n",i,s);        }    }    if(x!=1) printf("1 %d",x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>质数筛: 求[1,n]的质数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 埃氏筛 nloglognbool p[N]; // p[i]=1 说明不是质数void init(){    p[1]=1;    for(int i=2;i&lt;=n;i++)        if(!p[i]) // p[i]==0 说明 i 是质数            for(int j=2*i;j&lt;=n;j+=i)                p[j]=1;}// 线性筛, n 只会被最小质因子筛掉void init(){    for(int i=2;i&lt;=n;i++)    {        if(!st[i]) primes[cnt++]=i;        for(int j=0;primes[j]&lt;=n/i;j++)  // 从小到大枚举质数        {            st[primes[j]*i]=1;      // 只会用最小质因子去筛            if(i%primes[j]==0) break; // 当枚举到 i 的最小质因子时退出，因为 i×p[j+t]的最小质因子是p[j]// i%pj == 0, pj定为i最小质因子，pj也定为pj*i最小质因子// i%pj != 0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合数一定能被线性筛筛掉：因为合数=p*k,p 是最小质因子，当枚举质数到 i=k 时，就被筛掉了。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int j=0;primes[j]&lt;=n/i;j++)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不能去掉等号，当去掉等号会误筛掉很多 n 附近的合数。</p><h4 id="1-2-因数（约数）"><a href="#1-2-因数（约数）" class="headerlink" title="1.2 因数（约数）"></a>1.2 因数（约数）</h4><p>==约数个数==   ==约数之和== </p><blockquote><p>约数个数定理: 对于一个大于 1 的正整数 n 可以分解质因数</p><script type="math/tex; mode=display">n\ =\ \prod_{i=1}^{k} p_i^{a_i}=p_1^{a_1}·p_1^{a_1}····p_k^{a_k}\\p_1,p_2···p_k为 n 的质因子</script><p>约数的个数：$ f(n)=\prod_{i=1}^{k} (a_i+1) $  </p><p>约数的和：</p><script type="math/tex; mode=display">s(n)=\prod_{i=1}^{k} \sum_{j=0}^{a_i} p_i^j=(p_1^0+p_1^1+···+p_1^{a_1})\times ···\times (p_k^0+p_k^1+···+p_k^{a_k})</script></blockquote><p>==最大公约数 gcd== </p><p>d|a 且 d|b, 那么 d|(ax+by)</p><p>整除符号: |, 若 d|a 等价于 a=kd, k 为整数</p><blockquote><p><strong>欧几里得算法</strong>：$gcd(a,b)=gcd(b,a\ \%\  b)$  <span id="oujilide"> </span> </p><p>证明：不妨设 $a&gt;b&gt;0$，有 $a=k·b+r,\ \ k=\left \lfloor \frac{a}{b} \right \rfloor\ ,\ \ r=a\%b $ </p><p>如果 $r=0$, gcd(a,b)=gcd(b,0)=b</p><p>如果 $r\ne 0$, $r=a-k·b,\ \ 左右同除\ d\ ,得 \frac{r}{d}=\frac{a}{d}-\frac{k·b}{d}=m$,显然 m 是整数，所以 d|r, 即d|(a%b)。</p><p>假设 d 是 （b，a%b) 的任意一个公约数，a=yd+kb，两边同除 d 得 $\frac{a}{d}=y+\frac{kb}{d}$，所以 y 为正整数，d也是（a，b）的公约数。</p><p>所以 (a, b)和(b, a%b) 的公约数是一样的，自然最大公约数也一样。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 辗转相除法int gcd(int a,int b){    return b ? gcd(b, a%b) : a;  // b==0 输出}// STL函数c = __gcd(a,b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==求 n 以内的含有最多因子的数== （$n\le10^{18}$） </p><p>一个数的因子可以由多个质数相乘得到，由于 n 的范围。</p><blockquote><p>两个个数有相同数量的质因子，当最大质因子越大，因子数不会变多</p><p>证明：设两个数位为 $n$ 和 $m$，最大质因子为 $p_{nk}$&gt;$p_{nk}$。</p><p>质因子分解： $ n = p_1^{a_1}p_2^{a_2}···p_k^{a_k}$  </p><p>因数个数 $ f(n)=\prod_{i=1}^{k} (a_i+1) $   </p><p>所以，质因子应该越小越好。所以选取前 k 个质数，且质数乘积小于等于 n。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 选取前 15 个质数就够了，前 16 个质数乘积大于 1e18</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// sum 表数当前乘积，res表示当前因数个数，last表示前一个质数的指数</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span>ll sum<span class="token punctuation">,</span><span class="token keyword">int</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">&gt;=</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 不选择当前质数就更不可能选后面的质数，结束搜索</span>    <span class="token comment">// 选 i 次 p[now]。选择的个数要小于上一个质数选择的个数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>last<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>n<span class="token operator">/</span>p<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 不能写成 sum*p[now]，会超精度</span>        sum<span class="token operator">*=</span>p<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>res<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token punctuation">,</span>t<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-欧拉函数"><a href="#2-欧拉函数" class="headerlink" title="2 欧拉函数"></a>2 欧拉函数</h3><blockquote><p>phi(n)为 [1,n] 中与 n 互质的个数</p><p>n 的 质因子分解为 $ n = p_1^{a_1}p_2^{a_2}···p_k^{a_k}$ </p><p>那么 $phi(n)=n\times (1-\frac{1}{p_1})(1-\frac{1}{p_2})···(1-\frac{1}{p_k})$ </p><p>证明1（容斥原理）：</p><script type="math/tex; mode=display">phi(n)=n-\frac{n}{p_1}-\frac{n}{p_2}-···-\frac{n}{p_k}+\frac{n}{p_1p_2}+\frac{n}{p_1p_3}+···\\(分母为奇数个p为减，偶数个p为加)\\=n\times (1-\frac{1}{p_1})(1-\frac{1}{p_2})···(1-\frac{1}{p_k})</script></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 欧拉函数</span><span class="token keyword">int</span> <span class="token function">phi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">=</span>res<span class="token operator">/</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> n<span class="token operator">/=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">/</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 欧拉筛</span><span class="token keyword">int</span> phi<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">phis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                phi<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            phi<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>· 质数除了自己，其他都互质，所以 phi[i]=i-1;</p><p>· 当 i%prime[j]==0，p~j~ 是 i 的最小质因子，所以 i 的分解质因子里有 p~j~，因为欧拉函数和质因子指数无关，改变的只是前面的系数，所以 phi[i×p~j~]=i×p~j~×phi[i]</p><p>· 当 i%prime[j]!=0，i×p~j~ 比 i 的质因子多了 p~j~，所以</p><p>phi[i×p~j~]=phi[i]×p~j~×(1-1/p~j~)=phi[i]×(p~j~-1)</p><blockquote><p><strong>欧拉定理</strong>：a 与 n 互质，则有</p><script type="math/tex; mode=display">a^{phi(n)}\equiv 1\ (mod\ n)</script><p>证明：[1,n]中所有与 n 互质的数为 $a_1,a_2,···，a_{phi(n)}$，那么$a<em>a_1 \% n,a</em>a_2\% n,···，a*a_{phi(n)}\%n$ 也是[1,n]中与 n 互质的数</p><p>所以两列数除顺序外相同，所以相乘相等 $a^{phi(n)}<em>(a_1</em>a_2<em>···</em>a_{phi(n)})\%n=a_1<em>a_2</em>···*a_{phi(n)}$</p><p>化简得 $a^{phi(n)}\equiv 1(mod\ n)$ 得证</p><p>a % n = b 和 a $\equiv$ b (mod n)是等价的</p><p><strong>费马小定理</strong>：p 是质数且 a 与 p 互质，则有</p><script type="math/tex; mode=display">a^{p-1}\equiv 1\ (mod\ n)</script></blockquote><h3 id="3-快速幂"><a href="#3-快速幂" class="headerlink" title="3 快速幂"></a>3 快速幂</h3><p>求 $a^k\ \%\ mod$ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int qpow(int a,int k){    int res=1,base=a;    while(k)    {        if(k&amp;1) res=(ll)res*base%mod;        base=(ll)base*base%mod;        k&gt;&gt;=1;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵快速幂：</p><h3 id="4-扩展欧几里得"><a href="#4-扩展欧几里得" class="headerlink" title="4 扩展欧几里得"></a>4 扩展欧几里得</h3><blockquote><p>==裴属定理==：若 a, b 是整数, 且 gcd(a,b) = d，那么对于任意的整数 x、y, <strong>ax + by</strong> 都一定是 d 的倍数，特别地，一定存在整数 x，y，使 ax+by=d 成立，即 $ax+by=kd\ \ (k\ge 1)$ 。</p><p>证明：懒得证</p><p>d|a 且 d|b, 所以 d|ax 且 d|by, 所以 d|(ax+by) </p><p>==推论==：</p><ol><li>对于方程 ax+by=1，只有当整数a,b互质时，方程才有整数解</li><li>a，b互质的充要条件是 ax+by=1 有整数解 </li></ol><p>证明1：假设 a，b不互质，则a，b可以表示为 $a=q\times d$, $b=p\times d$ 。代入上式得</p><script type="math/tex; mode=display">q\times d \times x+p\times d \times y=1\\q\times x+p\times y=\frac{1}{d}\\d=gcd(a,b)\ne 1\\</script><p>所以该方程右边为小数，不存在整数解。</p><p>扩展欧几里得求 ax+by=d 的一组解的证明</p><p>当 $b=0$，式子转化为 $ax+by=a$，所以 x=1，y=0</p><p>当 $b\ne 0$，由<a href="#oujilide">欧几里得算法</a> gcd(a,b)=gcd(b,a%b)</p><script type="math/tex; mode=display">ax+by = gcd(a,b)=gcd(b,\ a\ \%\ b)\\=bx'+(a\ \%\ b)y' \\=bx'+(a-b*\left \lfloor \frac{a}{b}  \right \rfloor )y'\\=ay'+b(x'-\left \lfloor \frac{a}{b}  \right \rfloor y')\\比较等式两边可知\ x=y'\ \ \ y=x'-\left \lfloor \frac{a}{b}  \right \rfloor y'</script><script type="math/tex; mode=display">\begin{flalign*}&通解: \begin{cases}&  x=x_0+k\frac{b}{d} \\&  y=y_0-k\frac{a}{d}\end{cases}\\证明: &\ \ 将其代回原式， a(x_0+k\frac{b}{d})+b(y_0-k\frac{a}{d})=m\\&\ \ 展开得\ \  ax_0+by_0=m ,含有\ k\ 的被消去了\\&\ \ 得到的式子和原式一样，证毕&\end{flalign*}</script></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 伴随着欧几里得算法更新 x y 的过程void exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)  x=1,y=0;    else    {        exgcd(b,a%b,x,y);         int t=x;  x=y;        y=t-a/b*y;   // 对应上面的证明    }}// 省代码int exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)    {        x=1; y=0;        return a;    }    int d=exgcd(b,a%b,y,x); // 调换 x y    y-=a/b*x;    return d;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Exgcd应用：求解线性同余方程 <span id="linear congruent equation"> </span>  </p><script type="math/tex; mode=display">&ax\equiv\ b\ \ \ (mod\ \ m)\\\Longleftrightarrow & ax\ \%\ m=b\\\Longleftrightarrow & ax=my+b\\\Longleftrightarrow & ax-my=b \\\Longleftrightarrow & ax+my'=b\\\Longleftrightarrow & 给定a,b,m\ \  求 x\\& 所以如果b=k·gcd(a,m)才有解\\& 解为 gcd(a,m)/b*x\%m</script><blockquote><p>答案对 m 取模仍为答案</p><p>$ax\ \%\ m=b\Longleftrightarrow\ a·(x\ \%\ m)\ \%\ m=b$ </p><p>所以对 x % m仍是个答案</p></blockquote><h3 id="5-逆元"><a href="#5-逆元" class="headerlink" title="5 逆元"></a>5 逆元</h3><p>$ \frac{a}{b}\equiv a\times x \%\ m $，x 就是 b 的逆元</p><h5 id="5-1-快速幂求逆元"><a href="#5-1-快速幂求逆元" class="headerlink" title="5.1 快速幂求逆元"></a>5.1 快速幂求逆元</h5><p>要求模数 m 为质数。<br>b 存在乘法逆元的充要条件是 <strong>b 与模数 m 互质</strong> 。</p><blockquote><p>​    当 b 与 m 不互质时，因为 m 为质数，所以 b 为 m 的倍数，即b%m==0 时无解，费马小定理不成立。</p><p>​    当模数 <strong>m 为质数</strong>时且 <strong>b 和 m 互质</strong>时，$b^{m−2}$ 即为 b 的乘法逆元。</p><p>证明：由费马小定理 $ b^{m-1}\equiv 1\%\ m$</p><p>令    $\frac{a}{b}\equiv a\times x \%\ m$</p><p>所以$ \frac{a}{b}\times b^{m-1}\equiv a\times x \% \ m$ </p><p><strong>因此：</strong>$ a \times b^{m-2}\equiv a\times x \% \ m$   a 与 m 互质，约去</p><p><strong>所以：</strong>$x\equiv b^{m-2}  \%m$</p></blockquote><h5 id="5-2-扩展欧几里得求逆元"><a href="#5-2-扩展欧几里得求逆元" class="headerlink" title="5.2 扩展欧几里得求逆元"></a>5.2 扩展欧几里得求逆元</h5><p>扩展欧几里得可以求解<a href="#linear congruent equation">线性同余方程</a> $ax\equiv b\ \ (mod\ \ m)$ </p><p>求模 m 意义中 a 的逆相对于求$ax\equiv1\ \ (mod\ \ m)$， ax-my=1。gcd(a,m) 不为1则说明逆元不存在,若为1，则调整结果为x=(x%mod+mod)%mod.</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)    {        x=1; y=0;        return a;    }    int d=exgcd(b,a%b,y,x); // 调换 x y    y-=a/b*x;    return d;}int a,m,x,y;  cin&gt;&gt;a&gt;&gt;m;int d=exgcd(a,m,x,y);if(d==1) cout&lt;&lt;x%m&lt;&lt;endl;else cout&lt;&lt;"No"&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-中国剩余定理"><a href="#6-中国剩余定理" class="headerlink" title="6 中国剩余定理"></a>6 中国剩余定理</h3><p>问题：整数 $m_1,m_2,···,m_n$ 两两互素，则对于任意整数$a_1,a_2,···,a_n$，方程组：</p><script type="math/tex; mode=display">\left\{\begin{matrix}  x\equiv a_1\ \ (mod\ \ m_1) \\  x\equiv a_2\ \ (mod\ \ m_2) \\ ······ \\  x\equiv a_n\ \ (mod\ \ m_n)\end{matrix}\right.\\令\ \ M = \prod_{i=1}^{n}m_i  \\则 x\equiv \sum_{i=1}^{n}a_i×\frac{M}{m_i}×[(\frac{M}{m_i})^{-1}]\ \  (mod\ \ M)</script><blockquote><p><a href="https://www.acwing.com/problem/content/206/">扩展中国剩余定理</a></p><script type="math/tex; mode=display">\begin{flalign*}&选取两个方程\ \  x~~ mod~~a_1 = m_1，x\ \ mod\ \  a_2 = m_2\\&可以写成\qquad \ x\ =\ k_1a_1 + m_1，x\ =\ k_2a_2 + m_2\\&由两式得\qquad\ k_1a_1 - k_2a_2 = m_2 - m_1\\&通过扩欧可以知道\  k_1,k_2\ 有解等价于\ gcd(a_1,-a_2)|(m_2-m_1) \\& 解出通解\ \  k_1=k_1+k\frac{a_2}{d},\ k_2=k_2+k\frac{a_1}{d},\ r为任意正整数 \\& 将\ k_1,k_2\ 的通解代回得\ x=(k_1+k\frac{a_2}{d})a_1+m_1=k\frac{a_1a_2}{d}+(k_1a_1+m_1)  \\& 两个方程合并成一个方程，然依次合并到只剩一个，这个式子的解就是答案  \\&注： \frac{a_1a_2}{d}就是\ a_1,a_2\ 的最小公倍数；注意取模。&\end{flalign*}</script></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ll a1,m1;  cin&gt;&gt;a1&gt;&gt;m1; // 第一个方程int f=0;while(--n)  // 输入第2~n个方程{    ll a2,m2,k1,k2;  cin&gt;&gt;a2&gt;&gt;m2;    ll d=exgcd(a1,a2,k1,k2);    if((m2 - m1) % d)  // 不是 d 的倍数无解    {        cout&lt;&lt;-1&lt;&lt;endl; return 0;    }    // a1k1+a2k2=d的通解为 k1=k1+k*(a2/d)，k=0， k1是正解中最小的    // a1k1+a2k2=m2-m1 的通解为, 所以k1要扩大 (m2-m1)/d 倍    k1=k1 * (m2 - m1) / d;     // 但是经过乘了个 m2-m1 可能变负了    ll t=a2/d;   // 由通解可知模 t 也是解    k1=(k1 % t + t) % t;             // 新的方程 x = k(a2·a1/d)+k1a1+m1    m1=k1 * a1 + m1;    a1=abs(a1 / d * a2);}// 最后一个方程是 x=m1 (mod a1), x%a1=m1, m1&lt;a1, 所以m1是一个解cout&lt;&lt;m1&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-高斯消元"><a href="#7-高斯消元" class="headerlink" title="7 高斯消元"></a>7 高斯消元</h3><h4 id="7-1-线性方程组"><a href="#7-1-线性方程组" class="headerlink" title="7.1 线性方程组"></a>7.1 线性方程组</h4><p>用于求解线性方程组  $ \left\{\begin{matrix}<br>a_{11}x_1+a_{12}x_2+···+a_{1n}x_n=b_1 \\<br>a_{21}x_1+a_{22}x_2+···+a_{2n}x_n=b_2 \\<br>······ \\<br>a_{n1}x_1+a_{n2}x_2+···+a_{nn}x_n=b_n<br>\end{matrix}\right.$ </p><p>矩阵形式为 $Ax=B$，$A=\begin{bmatrix}<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n}\\<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n} \\<br> ··· &amp; ··· &amp; ··· &amp; ···\\<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n}<br>\end{bmatrix}$，$B=\begin{bmatrix}<br> b_1\\<br>b_2\\<br>\vdots  \\<br>b_n<br>\end{bmatrix}$ 。</p><p>将增广矩阵 [AB] 初等变换为化为上三角。高斯消元就是这个过程。</p><blockquote><ol><li>选取系数最大的那行，可以避免系数变得太大，精度较高，将r行与下面的行比较，不与第一行比</li><li>若最大的是 0，此行全 0，则无需操作</li><li>将含有更大的数这行与 r 行交换</li><li>将 r 行同时除 a[r,c],使a[r,c]=1</li><li>用新的 r 行对下面所有行的第c列消为 0，消的元素对应的每一个元素都要改变，此时 a[r,c]=1,所以j行-r行×a[i,c]即可</li><li>r++，接着操作下一行，重复上述过程。</li><li>根据R(A),R(AB),n的关系判断解的情况</li></ol></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">double a[105][105];int gauss(){    int c,r;  // r 是行，计算后也代表矩阵的秩    for(c=0,r=0;c&lt;n;c++)  // 枚举每一列    {        int t=r;        // 1、最大系数可以避免系数变得太大，精度较高        //    将r行与下面的行比较，不与第一行比        for(int i=r;i&lt;n;i++)            if(fabs(a[i][c])&gt;fabs(a[t][c]))                t=i;        // 2、最大的是 0，此行全 0        if(fabs(a[t][c])&lt;eps) continue;        // 3、将含有更大的数这行与 r 行交换        for(int i=c;i&lt;=n;i++)  swap(a[t][i],a[r][i]);        // 4、将 r 行同时除 a[r][c],使a[r][c]=1        for(int i=n;i&gt;=c;i--)  a[r][i] /= a[r][c];        // 5、用这行对下面行的第c列消为 0        for(int i=r+1;i&lt;n;i++)            if(fabs(a[i][c])&gt;eps)            {                // 消0对应的行的每一个元素都要改变                // 此时 a[r][c]=1,所以j行-r行×a[i][c]即可                for(int j=n;j&gt;=c;j--)                    a[i][j]-=a[r][j]*a[i][c];            }        // 6、接着对第 r+1 行操作        r++;    }    // 7、判断解的情况    if(r&lt;n)    {        for(int i=r;i&lt;n;i++)            if(a[i][n]&gt;eps)                return 0;  // R(A)&lt;R(AB)，无解        return 1; // R(A)=R(AB)&lt;n 无穷解    }    // R(A)=R(AB)=n 唯一解    // 已经化成上三角形式,从右下角开始化成除增广B矩阵外仅正对角线形式    for(int c=n-1;c&gt;0;c--)  // 从左往右枚举列    {        for(int r=0;r&lt;c;r++)  // 行            a[r][n]-=a[r][c]*a[c][n];  // c 也代表选中的1在的列    }    return 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-异或方程组"><a href="#7-2-异或方程组" class="headerlink" title="7.2 异或方程组"></a>7.2 异或方程组</h4><p>异或可以看出不进位的加法，同样可通过系数矩阵求解，即初等变换不改变解</p><p>异或方程组 $ \left\{\begin{matrix}<br>a_{11}x_1 \oplus a_{12}x_2\oplus···\oplus a_{1n}x_n=b_1 \\<br>a_{21}x_1\oplus a_{22}x_2\oplus ···\oplus a_{2n}x_n=b_2 \\<br>······ \\<br>a_{n1}x_1\oplus a_{n2}x_2\oplus ···\oplus a_{nn}x_n=b_n<br>\end{matrix}\right.$，$a_{ij}，b_{ij}=0\ \  or\ \ 1$ </p><p>对矩阵增广矩阵 [AB] 操作目标和线性方程组相同，代码这样写的原因也和普通高斯消元类似。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int gauss(){    int c=0,r=0;    for(;c&lt;n;c++)    {        int t=r;        for(int i=r;i&lt;n;i++)            if(a[i][c])            {                t=i; break;            }        if(a[t][c]==0) continue;  // 这一列全为 0        for(int i=c;i&lt;=n;i++) swap(a[r][i],a[t][i]);        // 因为a[r][c]=1，省略化为 1 的过程        // 对 r 行以下的行的 c 列消0        for(int i=r+1;i&lt;n;i++)        {            if(a[i][c]==0) continue;            for(int j=c;j&lt;=n;j++)  // 都是1，直接两行对应位置异或                a[i][j]^=a[r][j];        }        r++;    }    if(r&lt;n)    {        for(int i=r;i&lt;n;i++)            if(a[i][n]==1) return 0;        return 1;    }    for(int c=n-1;c&gt;0;c--)    {        for(int r=0;r&lt;c;r++)        {            if(a[r][c]==0) continue;            a[r][n]^=a[c][n];        }    }    return 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-组合数"><a href="#8-组合数" class="headerlink" title="8 组合数"></a>8 组合数</h3><blockquote><p>组合数公式：</p><ol><li><p>$C_a^b=C_{a-1}^b+C_{a-1}^{b-1}$ 用于递推、预处理</p></li><li><p>$C_a^b=C_{a}^{a-b}=\frac{a!}{b!(a-b)!}$ 用于直接求，需要求逆元</p></li><li><p>$ C_n^0+C_n^1+C_n^2+···+C_n^n=2^n $</p><p>证明：想一下，从 n 个物品取，求取法，左边是从0个，1个···到n个的取法，它们的和就是总取法，右边可以表示一个商品有两种状态，取或者不取，由乘法原理可知是$2^n$。</p><p>严谨的数学归纳法：n=1,显然成立。</p><p>假设 n=k 时公式成立 $\sum_{i=0}^{k}C_k^i=2^n$，那么当 n=k+1 时</p><p>$ C_{k+1}^{0}+C_{k+1}^{1}+···+C_{k+1}^{k}+C_{k+1}^{k+1} = 2 $，由公式 1. 可以将$C_{k+1}^{i}$ 拆成两部分，发现正好等于 2倍的 $\sum_{i=0}^{k}C_k^i$，即 2*2^k^=2^k+1^。</p></li><li><p>==二项式系数==：$(a+b)^n=C_{n}^{0}b^n+C_{n}^{1}ab^{n-1}+···+C_{n}^{i}a^ib^{n-i}+···+C_{n}^{n}a^n $ </p><p>证明：数学归纳···</p></li><li><p>==卢卡斯定理==：$C_a^b\equiv C_{a\%p}^{b\%p}·C_{a/p}^{b/p}\ \ (mod\ \ p)$ 用于求a、b较大的情况</p><p>另一种形式$C_a^b=C_{a_0}^{b_0}+C_{a_1}^{b_1}+···+C_{a_k}^{b_k}\ \ \ (mod\ \ p)$，其中</p><p>$a=a_0+a_1p+a_2p^2+···+a_kp^k$，$b=b_0+b_1p+b_2p^2+···+b_kp^k$ </p></li></ol><p>证明：</p><p>首先证明   $(1+x)^p \equiv 1+x^p\ \ (mod\ \ p)$ </p><p>$左边=C_p^01+C_p^1x+C_p^2x^2+···+C_p^px^p$，因为$C_p^i=\frac{p!}{(p-i)!·i!}$，p为质数，所以当 $0&lt;i&lt;p$ 时，$C_p^ix^i$ 被 p 取模消去，所以只留下两端，得证。</p><p>同理证得: $(1+x)^{p^\alpha}\equiv 1+x^{p^\alpha } \ \ (mod\ \ p)$ .</p><p>将 $a，b$ 转化为 p 进制数，$a=a_0+a_1p+a_2p^2+···+a_kp^k$，$b=b_0+b_1p+b_2p^2+···+b_kp^k$ </p><script type="math/tex; mode=display">\begin{align*}(1+x)^a &= (1+x)^{a_0+a_1p+a_2p^2+···+a_kp^k}\\& = (1+x)^{a_0}\times((1+x)^{p_1})^{a_1}\times···\times((1+x)^{p_k})^{a_k}\\&\equiv(1+x)^{a_0}\times(1+x^{p^1})^{a_1}\times···\times(1+x^{p^k})^{a_k}\ \ (mod\ \ n) &\end{align*}</script><p>$C_a^b$ 就是 $(1+x)^a$ 展开式中 $x^b$ 的系数，即 $x^{b_0+b_1p+b_2p^2+···+b_kp^k}$ 的系数。对比左边和右边每一项 $x^b$ 的系数可知</p><p>$C_a^b\equiv C_{a_0}^{b_0}\times C_{a_1}^{b_1}\times ···\times C_{a_k}^{b_k}\ \ (mod\ \ n) $ </p><p>$C_{a_0}^{b_0}=C_{a\%p}^{b\%p}$，因为转化为p进制的第一位就是对 p 取余得到的</p><p>$C_{a/p}^{b/p}=C_{a_1}^{b_1}\times ···\times C_{a_k}^{b_k}$，p 进制下，将 a，b 右移一位相当于 /p ，和 $C_a^b$ 一样分析，证明这个式子是正确。</p></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int c[N][N];void init{    for(int i=0;i&lt;N;i++)  // i 代表总的，j 代表 被选的        for(int j=0;j&lt;=i;j++)            if(!j) c[i][j]=0;    else  c[i][j]=c[i-1][j]+c[i-1][j-1]%mod;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int c(int a,int b){    int m=jc[a],z=(ll)jc[b]*jc[a-b]%mod;// 预处理的阶乘数组    return (ll)m*kpow(z,mod-2)%mod;  // 快速幂求逆元}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int lucas(ll a,ll b,int p){    if(a&lt;p &amp;&amp; b&lt;p)  return c(a,b,p);    return (ll)c(a%p, b%p, p) * lucas(a/p, b/p, p) % p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不取模的组合数，高精度+质因子分解</p><p>将阶乘分式约分，消去分母，再将分母质因子分解，答案就是这些质因子的乘积。</p><p>求 n！质因子个数: $num = \frac{n}{p}+\frac{n}{p}+···+\frac{n}{p^k}$ </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 求质因子及其个数的过程 int get(int n,int p){    int res=0;    while(n)  // num=n/p+n/p^2+···    {        res+=n/p;        n/=p;    }    return res;}for(int i=0;i&lt;cnt;i++)   // C(a,b) {    int p=primes[i];     sum[i]=get(a,p)-get(a-b,p)-get(b,p); // 统计个数 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-博弈论"><a href="#9-博弈论" class="headerlink" title="9 博弈论"></a>9 博弈论</h3><p>若一个游戏满足：</p><ol><li>由两名玩家交替行动</li><li>游戏进行的任意时刻，可以执行的合法行动与轮到哪位玩家无关</li><li>不能行动的玩家判负</li><li>则称该游戏为一个公平组合游戏</li></ol><p>==必胜状态==：先手进行某一个操作，留给后手是一个必败状态时，对于先手来说是一个必胜状态。可以走到某一个必败状态。</p><p>==必败状态==：先手无论如何操作，留给后手都是一个必胜状态时，对于先手来说是一个必败状态。走不到任何一个必败状态。</p><h5 id="9-1-Nim游戏"><a href="#9-1-Nim游戏" class="headerlink" title="9.1 Nim游戏"></a>9.1 Nim游戏</h5><p>给定 n 堆石子，两位玩家轮流操作，每次操作可以从任意一堆石子中拿走任意数量的石子（可以拿完，但不能不拿），最后无法进行操作的人视为失败。问如果两人都采用最优策略，先手是否必胜。</p><blockquote><p>结论：有 n 堆石子，石子数目分别是 $a_1,a_2,…,a_n$ 如果$a_1⊕a_2⊕…⊕a_n=x≠0$，先手必胜；否则先手必败。</p><p>（1）在操作过程中，如果 $a_1⊕a_2⊕…⊕a_n=x≠0$。那么玩家必然可以通过拿走某一堆若干个石子将异或结果变为0。</p><p>证明：设 x 的二进制表示中最高的一位 1 在第 k ，那么 $a_1 \sim a_n$ 必然存在一个数 $a_i$ 的第 k 位是 1，且 $a_i\oplus x&lt;a_i$，然后从第 i 堆石子拿出 $a_i-a_i\oplus x$，第 i 堆还剩 $a_i\oplus x$ 个,这时有：$a_1⊕a_2⊕…\oplus a_i\oplus x\oplus…⊕a_n= 0$ </p><p>（2）在操作中，若 $a_1⊕a_2⊕…⊕a_n=0$，那么无论玩家怎么取，最终异或和都不为0。</p><p>证明（反证法）：假设玩家从第 $i$ 堆石子拿走若干个，异或和结果仍是 0。设剩下的石子为 $a’$，所以必然有 $0\le a’&lt;a_i$，且 $a_1⊕a_2⊕……⊕a’⊕…⊕a_n=0$，所以联立原式和取后的式子，$(a_1⊕a_2⊕…⊕a_i⊕…a_n)⊕(a_1⊕a_2⊕…⊕a′⊕…⊕a_n)=a_i⊕a′=0$，这个式子说明 $a_i=a’$，与假设矛盾，因此得证。</p><p>由(1)，(2)可知：</p><ol><li><p>如果先手面对的局面是 $a_1⊕a_2⊕…⊕a_n≠0$，那么先手总可以通过拿走某一堆若干个石子，将局面变成 $a_1⊕a_2⊕…⊕a_n=0$。如此重复，最后一定是后手面临最终没有石子可拿的状态。先手必胜。</p></li><li><p>如果先手面对的局面是 $a_1⊕a_2⊕…⊕a_n=0，那么无论先手怎么拿，都会将局面变成 $$a_1⊕a_2⊕…⊕a_n≠0$，那么后手总可以通过拿走某一堆若干个石子，将局面变成 $a1⊕a2⊕…⊕an=0$。如此重复，最后一定是先手面临最终没有石子可拿的状态。先手必败。</p></li></ol></blockquote><p>==台阶-Nim游戏==：现在，有一个 n 级台阶的楼梯，每级台阶上都有若干个石子，其中第 i 级台阶上有 $a_i$ 个石子(i≥1)。两位玩家轮流操作，每次操作可以从任意一级台阶上拿若干个石子放到下一级台阶中（不能不拿）。已经拿到地面上的石子不能再拿，最后无法进行操作的人视为失败。</p><p>问如果两人都采用最优策略，先手是否必胜?</p><blockquote><p>结论：<strong>奇数楼梯</strong>石子数异或和为 不为 0，先手必胜，否则先手必败</p><p>证明：游戏的终点是所有楼梯上的石子全为 0。</p><p>（1）在操作过程中，初始 $a_1\oplus a_3\oplus…=x\ne0$ ，那么最佳策略是从某奇数楼梯若干个取石子，可使奇数楼梯异或和为 0。</p><p>证明：设 x 的二进制表示中最高的一位 1 在第 k ，那么 $a_1 、a_3、a_5…$ 必然存在一个数 $a_i$ 的第 k 位是 1，且 $a_i\oplus x&lt;a_i$，然后从第 i 堆石子拿出 $a_i-a_i\oplus x$，第 i 堆还剩 $a_i\oplus x$ 个,这时有：$a_1⊕a_3⊕…\oplus a_i\oplus x\oplus…= 0$ 。</p><p>（2）在操作中，若 $a_1⊕a_3⊕a_5\oplus……=0$，那么无论玩家怎么取，最终异或和都不为0。</p><p>证明：</p><ul><li>从偶数拿下去，偶数必不可能直接拿到地面。不妨设拿了 x 个石子到下一阶奇数楼梯，那么 $a_1⊕a_3⊕a_5\oplus…\oplus x=0\oplus x=x\ne0$，所以这种情况不为0。</li><li>从奇数楼梯拿下去。（反证法）：假设玩家从奇数第 $i$ 堆石子往下拿若干个，异或和结果仍是 0。设剩下的石子为 $a’$，所以必然有 $0\le a’&lt;a_i$，且 $a_1⊕a_2⊕……⊕a’⊕…=0$，所以联立原式和取后的式子，$(a_1⊕a_2⊕…⊕a_i⊕…a_n)⊕(a_1⊕a_2⊕…⊕a′⊕…⊕a_n)=a_i⊕a′=0$，这个式子说明 $a_i=a’$，与假设矛盾，因此得证。</li><li>由上述两个证明可知，当 $a_1⊕a_3⊕a_5\oplus……=0$ 时，先手无论怎么 拿，后手都能使下一次先手遇到未奇数异或和为0。而游戏结束时奇数异或和是0，所以先手先遇到无法操作的情况。而 $a_1⊕a_3⊕a_5\oplus……\ne 0$ 时，先手可以选择拿走奇数堆若干个使奇数堆偶数和为0，让后手先遇到无法操作的情况。得证。</li></ul></blockquote><h5 id="9-2-SG-函数"><a href="#9-2-SG-函数" class="headerlink" title="9.2 SG 函数"></a>9.2 SG 函数</h5><p>==Mex运算==：设S表示一个非负整数集合.定义 mex(S) 为求出不属于集合S的最小非负整数运算, 即: mes(S)=min{x}。</p><p>​    例如:S={0,1,2,4}, 那么 mex(S)=3</p><p>==有向图游戏==：给定一个有向无环图，图中有一个<strong>唯一的起点</strong>，在起点上放有一枚棋子。两名玩家<strong>交替</strong>地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。</p><p>==公平组合游戏==：</p><p>（1）有两个玩家，游戏规则对两个玩家公平</p><p>（2）游戏状态有限，能走的步数也是有限的</p><p>（3）轮流走，当一个玩家不能走时游戏结束</p><p>（4）游戏的局势不能区分玩家的身份，例如黑白棋就是不行的</p><p>（5）给定初始局势，指定先手玩家，如果双方都采取最优策略，那么<strong>获胜者已经确定</strong>了，也就是说ICG问题存在必胜策略</p><p>​    任何一个<strong>公平组合游戏</strong>都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。</p><p>==SG函数==：在有向图游戏中,对于每个节点 $x$，设从 $x$ 出发共有 $k$ 条有向边,分别到达节点 $y_1,y_2,····y_k$，定义 $SG(x)$ 的后记节点 $y_1,y_2,····<br>y_k$ 的SG函数值构成的集合在执行 <strong>mex运算</strong> 的结果,即:<br>$SG(x)=mex(\{SG(y_1),SG(y_2)····SG(y_k)\})$<br>特别地,整个有向图游戏 G 的SG函数值被定义为有向图游戏起点 s 的SG函数值,即 SG(G)=SG(s).</p><p>==有向图游戏和==：设 $G_1，G_2,····,G_m$ 是 m 个有向图游戏.定义有向图游戏G,他的行动规则是任选某个有向图游戏 $ G_i$，并在 $G_i$ 上行动一步.G被称为有向图游戏 $G_1,G_2,·····,G_m$ 的和.<br>有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数的异或和,即:<br>$SG(G)=SG(G_1)\oplus SG(G_2)\oplus···\oplus SG(G_m)$ 。</p><p>若 SG(G)=0，则先手必败，否则先手必胜，证明同Nim游戏 </p><p>求SG函数异或和，一般用记忆化搜索的方式：</p><p><a href="https://www.acwing.com/problem/content/description/895/">集合-Nim游戏</a>：看成多个有向图，一个数可以变为其他，返回递归求的这个数的SG值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int sg(int x){    if(g[x]!=-1) return g[x];    unordered_set&lt;int&gt; se;    for(int i=0;i&lt;k;i++)    {        if(x&gt;=s[i])  se.insert(sg(x-s[i]));        else break;    }    for(int i=0;;i++)    {        if(!se.count(i)) return g[x]=i;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/896/">拆分-Nim游戏</a>：一堆分成多堆，一个图变成两个图，那么SG(G)=SG(G~1~)^SG(G~2~)。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int sg(int x){    if(g[x]!=-1) return g[x];    unordered_set&lt;int &gt; se;    for(int i=0;i&lt;x;i++)        for(j=0;j&lt;i;j++)            se.insert(sg(i)^sg(j)); // 将两个图的SG异或起来就得到了    for(int i=0;;i++)        if(!se.count(i)) return g[x]=i;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-容斥原理"><a href="#10-容斥原理" class="headerlink" title="10 容斥原理"></a>10 容斥原理</h3><p>图图</p><p>证明：假设元素 x 在 k 个集合中出现，则被计算的次数为</p><p>$C_k^1 - C_k^2+C_k^3+···+(-1)^{k-1}C_k^k $ ，由二次项展开可知，该式等于 $-(1-1)^k+1=C_k^0=1 $，因此一个元素只被计算一次。</p><p>常常与二进制枚举配合使用</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;(1&lt;&lt;m);i++) // 1~1111, 共有 2^n-1种选法{    int cnt=0;    for(int j=0;j&lt;m;j++)  // 数组从 0 开始    {        // i&gt;&gt;j &amp; 1        if(i&amp;(1&lt;&lt;j))   // 判断i低j位是否为1，若为1 则选择这个        {            cnt++;  // 选择个数+1，            // 对这个数进行某种操作        }    }    // 对选择的进行计算，比如奇数个 加，偶数个 减。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-卡特兰数"><a href="#11-卡特兰数" class="headerlink" title="11 卡特兰数"></a>11 卡特兰数</h3><p><strong>卡特兰数</strong>：$C_{2n}^n - C_{2n}^{n-1}=\frac{C_{2n}^n}{n+1}$  </p><p>应用：<a href="https://www.acwing.com/problem/content/891/">构造01序列</a>，<a href="https://www.acwing.com/problem/content/132/">火车进出栈</a>，</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int res=1;for(int i=n+1;i&lt;=2*n;i++) res=(ll)res*i%mod;int x,y;for(int i=1;i&lt;=n+1;i++){    exgcd(i,mod,x,y);    x=(x%mod+mod)%mod;    res=(ll)res*x%mod;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五章-动态规划"><a href="#第五章-动态规划" class="headerlink" title="第五章 动态规划"></a>第五章 动态规划</h2><h3 id="1-背包问题"><a href="#1-背包问题" class="headerlink" title="1 背包问题"></a>1 背包问题</h3><h4 id="1-1-01背包"><a href="#1-1-01背包" class="headerlink" title="1.1 01背包"></a>1.1 01背包</h4><p>有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能<strong>使用一次</strong>。第 $i$ 件物品的体积是 $v_i$，价值是 $w_i$。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，</p><p>且总价值最大。输出最大价值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 二维形式for(int i=1;i&lt;=N;i++){for(int j=0;j&lt;=V;j++)    {        f[i][j]=f[i-1][j];        if(j&gt;=v[i])            f[i][j]=max(f[i-1][j],f[i-1][j-v[i]]+w[i]);    }}// 一维优化for(int i=1;i&lt;=N;i++)    for(int j=V;j&gt;=v[i];j--)        f[j]=max(f[j],f[j-v[i]]+w[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-完全背包"><a href="#1-2-完全背包" class="headerlink" title="1.2 完全背包"></a>1.2 完全背包</h4><p>有 $N$ 种物品和一个容量是 $V$ 的背包，每种物品都有<strong>无限件可用</strong>。第 $i$ 种物品的体积是 $v_i$，价值是 $w_i$。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">\\三重循环：for(int k = 0 ; k*v[i]&lt;=j ; k++)    f[i，j] = max(f[i,j], f[i-1,j-k*v[i]]+k*w[i]);\* 优化至二重循环f[i,j]=max(f[i-1,j],f[i-1,j-v]+w,f[i-1,j-2*v]+2*w,f[i-1,j-3*v]+3*w,……)f[i,j-v]=max(       f[i-1,j-v],  f[i-1,j-2*v]+w,  f[i-1,j-3*v]+2*w,……)由上两式，可得出如下递推关系： f[i][j]=max(f[i-1][j], f[i][j-v]+w)该递推式和01背包递推式只有 f[i][j-v] 不一样完全背包用的是当前循环的值，所以从小到大循环*/for(int i=1;i&lt;=N;i++){    for(int j=0;j&lt;=V;j++)    {        f[i][j]=f[i-1][j];        if(j&gt;=v[i])        f[i][j]=max(f[i-1][j],f[i][j-v[i]]+w[i]);    }}// 优化至一维for(int i=1;i&lt;=N;i++)    for(int j=v[i];j&lt;=V;j++)        f[j]=max(f[j],f[j-v[i]]+w[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完全背包变形</strong>：<a href="https://www.acwing.com/problem/content/902/">整数划分</a></p><p>一个正整数 $n$ 可以表示成若干个正整数之和，形如：$n=n_1+n_2+…+n_k$，其中 $n_1≥n_2≥…≥n_k,k≥1$。我们将这样的一种表示称为正整数 $n$ 的一种划分。现在给定一个正整数 $n$，请你求出 $n$ 共有多少种不同的划分方法。</p><p>将 a[]= {1，2，3，···，n} 看成 n 种物品，每种物品可以用无限次，体积为 $a_i$。</p><p>f[i,j] 代表选择前 i 个和为 j 的方案数。</p><p>任何一种选法都代表着一种划分。</p><p>那么递推式推导和完全背包递推式推导一样</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 选 i = 不选 i 且体积为 j-k*i 的情况之和</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">+</span>···<span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token operator">*</span>s<span class="token punctuation">]</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span>        f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">+</span>···<span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token operator">*</span>s<span class="token punctuation">]</span>所以 f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token comment">// 所以二维做法是</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span>  f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// Amezing!for (int i = 1; i &lt;= n; i ++)for (int j = i; j &lt;= n; j ++)    f[j] = f[j] + f[j - i] % mod;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-多重背包"><a href="#1-3-多重背包" class="headerlink" title="1.3 多重背包"></a>1.3 多重背包</h4><p>有 $N$ 种物品和一个容量是 $V$ 的背包。</p><p>第 $i$ 种物品<strong>最多有 $s_i$ 件</strong>，每件体积是 $v_i$，价值是 $w_i$。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。输出最大价值。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">\\ 朴素多重背包，循环 s 次这个物品 O(NVS)for(int i=1;i&lt;=N;i++)    for(int k=1;k&lt;=s[i];k++)    for(int j=V;j&gt;=v[i];j--)        f[j]=max(f[j],f[j-v[i]]+w[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二进制优化它选某种物品的方法 O(NVlogS)<br>将物品拆分成 1，2，4，8，……，然后进行01背包</p><blockquote><p>在多重背包转化01背包中，将 s 件物品分成 1，2，4，……，2^k，sum 是正确的</p><p>证明：s 可以表示成二进制形式，枚举二进制形式的 1 ，有两种选择方式，选或者不选，通过这两种状态，物品选择范围可以到 0~s 。</p><p>例如 s=9=1001，被拆分为 1，10，100，即 1 2 4 9-7=2。通过这些物品的组合可以凑出选择 s 的所有情况。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i=1;i&lt;=N;i++){    int num=min(s[i],V/v[i]); // 能选择 i 的最大数量    for(int k=1;num&gt;0;k&lt;&lt;=1)  // 划分为 1 2 4 ···    {        if(k&gt;num) k=num;  // 2^n要大于剩余的        num-=k;        for(int j=V;j&gt;=k*v[i];j--)        {            f[j]=max(f[j],f[j-k*v[i]]+k*w[i]);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-分组背包"><a href="#1-4-分组背包" class="headerlink" title="1.4 分组背包"></a>1.4 分组背包</h4><p>有 $N$ 组物品和一个容量是 $V$ 的背包。</p><p>每组物品有 $s_i$ 种，<strong>同一组内的物品最多只能选一个</strong>。每件物品的体积是 $v_{ij}$，价值是 $w_{ij}$，其中 $i$ 是组号，$j$ 是组内编号。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>枚举组，从组中选一个就行。01背包倒序枚举V，每次使用的都是上组的f，因此保证了每组只选了一个，且这一个整体来看是最划算的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                  f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-线性DP"><a href="#2-线性DP" class="headerlink" title="2 线性DP"></a>2 线性DP</h3><h4 id="2-1-最长上升子序列"><a href="#2-1-最长上升子序列" class="headerlink" title="2.1 最长上升子序列"></a>2.1 最长上升子序列</h4><p>给定一个长度为 $N$ 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 朴素做法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单调栈优化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 栈是递增的</span>stk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span> <span class="token comment">// 栈底置为无穷小</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 直接加后面</span>    stk<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>   <span class="token comment">// 找一个大于等于 a[i] 的替换掉，栈仍然单调</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>stk<span class="token punctuation">,</span>stk<span class="token operator">+</span>tt<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>stk<span class="token punctuation">;</span>        stk<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>tt 即为最大长度，stk 为选的数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-最长公共子序列"><a href="#2-2-最长公共子序列" class="headerlink" title="2.2 最长公共子序列"></a>2.2 最长公共子序列</h4><p>给定两个长度分别为 $N$ 和 $M$ 的字符串 $A$ 和 $B$，求既是 $A$ 的子序列又是 $B$ 的子序列的字符串长度最长是多少。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=m;j++)            if(a[i]==b[j])                 f[i][j]=max(f[i][j],f[i-1][j-1]+1);            else                f[i][j]=max(f[i-1][j],f[i][j-1]);cout&lt;&lt;f[n][m]&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编辑距离"><a href="#3-编辑距离" class="headerlink" title="3 编辑距离"></a>3 编辑距离</h3><p>一下操作将字符串 A 变为距离为 1 的其他字符串</p><ol><li><strong>删除</strong>–将字符串 A 中的某个字符删除。</li><li><strong>插入</strong>–在字符串 A 的某个位置插入某个字符。</li><li><strong>替换</strong>–将字符串 A 中的某个字符替换为另一个字符。</li></ol><p>现在请你求出，将 A 变为 B 至少需要进行多少次操作。</p><p>A → B 的方式：删，增，改，不变</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// f(i,j) 表示 a 前 i，变成 b 前 j 的距离int f[N][N];  for(int i=1;i&lt;=n;i++) f[i][0]=i;for(int i=1;i&lt;=m;i++) f[0][i]=i;for(int i=1;i&lt;=n;i++){    for(int j=1;j&lt;=m;j++)    {        f[i][j]=min(f[i-1][j]+1,f[i][j-1]+1);        if(a[i]!=b[j])            f[i][j]=min(f[i][j],f[i-1][j-1]+1);        else f[i][j]=f[i-1][j-1];    }}cout&lt;&lt;f[n][m]&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-区间DP"><a href="#4-区间DP" class="headerlink" title="4 区间DP"></a>4 区间DP</h3><p><a href="https://www.acwing.com/problem/content/284/">合并石子</a> </p><p>先枚举区间长度，在枚举可行的左端点，对应算出右端点，然后枚举中间点，状态整合。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">memset(f,0x3f,sizeof(f));for(int i=1;i&lt;=n;i++) f[i][i]=0;for(int len=2;len&lt;=n;len++)      // 枚举区间的长度{    for(int i=1;i+len-1&lt;=n;i++)  // 左端点    {        int j=i+len-1;           // 右端点        for(int k=i;k&lt;j;k++)            f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]+sum[j]-sum[i-1]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数位DP"><a href="#5-数位DP" class="headerlink" title="5 数位DP"></a>5 数位DP</h3><h3 id="6-状态压缩DP"><a href="#6-状态压缩DP" class="headerlink" title="6 状态压缩DP"></a>6 状态压缩DP</h3><p><a href="https://www.acwing.com/problem/content/293/">蒙德里安的梦想</a> </p><p>当放完横向的方格时，竖向的小方格放置情况就唯一且确定了，所以问题转化为只放横向的小方格的方案数量。</p><p>f(i,j) 表示前 i-1 列已摆好，且从 i-1 列伸出到的第 i 列的状态是 j 的所有方案数。</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/状压DP" alt="img"></p><p><a href="https://www.acwing.com/problem/content/93/">路径最短Hamilton</a> </p><p>用二进制数表示走了哪几个点。</p><p>f(i,j)表示所有从 0 走到 j 的，路过点的情况是 i 的所有路径的花费最小值。</p><p>例如：i=0100110 表示经过了 点1、4、5，没经过0、2、3、6。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 到起点的花费为 0 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 遍历所有路径情况</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//  j 点在路径 i 中</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 从 k 点转移到 j</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 需确保 k 在路径 i 中</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ans<span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 经过所有点，到达 n-1 点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-树形DP"><a href="#7-树形DP" class="headerlink" title="7 树形DP"></a>7 树形DP</h3><p>在一颗树上进行动态规划。</p><p><a href="https://www.acwing.com/problem/content/287/">没有直接上司的舞会</a> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">f[x][1]  // 表示选了 x 点f[x][0]  // 表示没选 x 点void dp(int x){    f[x][1]=w[x];  // 不放在下面加是因为叶子结点不会进入下面的循环    for(int i=h[x];i!=-1;i=ne[i])    {        int y=e[i];        dp(y);        f[x][1]+=f[y][0];        f[x][0]+=max(f[y][0],f[y][1]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-记忆化搜索"><a href="#8-记忆化搜索" class="headerlink" title="8 记忆化搜索"></a>8 记忆化搜索</h3><p>记下dfs的返回值</p><p><a href="https://www.acwing.com/problem/content/description/903/">滑雪</a> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ma<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;=</span>c<span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&lt;</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            ma<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>ma<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六章-贪心"><a href="#第六章-贪心" class="headerlink" title="第六章 贪心"></a>第六章 贪心</h2><p><a href="https://www.acwing.com/problem/content/908/">区间分组</a></p><p><a href="https://www.acwing.com/problem/content/127/">耍杂技的牛</a></p><p>题解：拿出相邻的两头牛上面的编号为 i，下面的编号为 i+1。</p><p>两头牛的体重和强壮度有什么关系，i 在上能使 i 头牛和 i+1 头牛的风险度最大值最小。</p><p>当前情况：</p><p>第 i 头牛的风险为：$R_i=\sum_{j=1}^{i-1}W_j-S_i$</p><p>第 i+1 头牛的风险为：$ R_{i+1}=\sum_{j=1}^{i-1}W_j+W_i-S_{i+1}$ </p><p>交换 i 与 i+1，风险度变为：</p><p>第 i 头牛的风险为：$R_i=\sum_{j=1}^{i-1}W_j+W_{i+1}-S_i$ </p><p>第 i+1 头牛的风险为：$ R_{i+1}=\sum_{j=1}^{i-1}W_j-S_{i+1}$ </p><p>去掉相同部分，若交换前风险度最大值是最小的需要保证 $MAX(-S_i,W_i-S_{i+1})\le MAX(W_{i+1}-S_i,-S_{i+1})$。</p><p>显然 $-S_i\le W_{i+1}\ 和\ W_i-S_{i+1}&gt;-S_{i+1}$，因此只需保证 $W_i-S_{i+1}\le W_{i+1}-S_i$，移项得$ W_i+S_i\le W_{i+1}+S_{i+1}$。</p><p>所以该题目按照 W+S 排序即可。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-提高</title>
      <link href="/suan-fa/suan-fa-bi-ji-ti-gao/"/>
      <url>/suan-fa/suan-fa-bi-ji-ti-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-动态规划"><a href="#第一章-动态规划" class="headerlink" title="第一章 动态规划"></a>第一章 动态规划</h2><h3 id="1-数字三角形"><a href="#1-数字三角形" class="headerlink" title="1 数字三角形"></a>1 数字三角形</h3><p>在矩阵里走路，从左上角走到右下角问题</p><p><a href="https://www.acwing.com/problem/content/277/">传纸条</a></p><p>关键在于分析矛盾情况，这个点是否可以走，可以由哪里来。根据状态计算来到当前点的值。</p><p>通常设置 f(k,i,u) 为集合，k 为总共走了多少步，i 为第一个点的横坐标，u 为第二个点的横坐标。由于两个点走的步数相同，因此当 i==u 时，二者相遇到同一点。</p><h3 id="2-最长上升子序列模型"><a href="#2-最长上升子序列模型" class="headerlink" title="2 最长上升子序列模型"></a>2 最长上升子序列模型</h3><p>基础版</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// memset 只能初始化为 0 -1 0x3f</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>各种变形</p><p>1 <strong>上升下降</strong>最长子序列：<a href="https://www.acwing.com/problem/content/1016/">登山 </a> </p><p>先从左往右求以 i 为结尾的最长上升子序列 f，再从右往左求以 i 为结尾的最长上升子序列 g，则答案为 max(f(i)+g(i)-1)。</p><p>2 <strong>友好城市</strong>建桥不相交问题：<a href="https://www.acwing.com/problem/content/1014/">友好城市</a> </p><p>左边按坐标排序，求右边的最长上升子序列即可。</p><p>3 <a href="https://www.acwing.com/problem/content/1018/">最大上升子序列和</a>  </p><p>这次不是求长度了，是求上升子序列中的最大和。类比长度计算即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memcpy</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 a 全赋值给 f</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4 数组中，最少的不上升子序列覆盖数组：<a href="https://www.acwing.com/problem/content/1012/">拦截导弹</a> </p><ul><li><p>第一问求一个拦截系统最多能拦截多少个导弹，求最长不上升子序列即可。</p></li><li><p>第二问求至少需要多少个拦截系统能拦截所有导弹：贪心计算</p><p>维护多个系统末尾高度数组，这个数组是递增的，当新来一个导弹，若导弹大于所有系统的末尾高度，则新开一个系统并将该导弹高度作为新系统末尾高度，否则寻找一个不小于导弹高度中最小的那个与之交换。</p><blockquote><p>==调整法==贪心证明：假设第 i 个数 x ，贪心解和最优解放置方案不一样，</p><p>x 在贪心解中接在 a 后面，在最优解中接在 b 后面，此时 $x\le a\le b$ ，那么必然可以将贪心解 x 后面的序列和最优解 x 后面的序列进行交换，因此在结果不变的情况下贪心解必然可以转换为最优解，因此贪心是正确的。</p></blockquote></li></ul><p>5 最少的上升子序列和下降子序列覆盖：<a href="https://www.acwing.com/problem/content/description/189/">导弹防御</a> </p><p>   可以观察到 $n\le50$ 范围比较小。考虑贪心+剪枝dfs。</p><p>​    </p><p>6 时间复杂度的优化 $O(nlogn)$ </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 栈是递增的</span>stk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span> <span class="token comment">// 栈底置为无穷小</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 直接加后面</span>    stk<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>   <span class="token comment">// 找最小的大于等于 a[i] 的替换掉，栈仍然单调</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>stk<span class="token punctuation">,</span>stk<span class="token operator">+</span>tt<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>stk<span class="token punctuation">;</span>        stk<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// tt 即为最大长度，stk 为选的数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7 <a href="https://www.acwing.com/problem/content/274/">最长上升公共子序列</a> </p><p>寻找两个数组的最长公共子序列</p><p>f(i,j) 表示 $a(1\sim i)$，$b(1\sim j)$ 中以 $b_j$ 结尾的最长公共上升子序列的长度最大值。</p><ol><li>不包含 $a_i$ ，最大值为 $f[i-1,j]$ </li><li>包含 $a_i$，如果 $a_i\ne b_j$，相当于不包含 $a_i$。所以考虑 $a_i=b_j$， 然后继续划分，子序列是由 $b$ 前面哪个承接过来的。所以要枚举 b 数组前面的每一项，若 $b_k&lt;b_j$，则可以转移过来，所以最大长度是 $f[i,k]+1$。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> ma<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> ma<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 优化：由于是枚举小于 ai 或者说是 bj 的值，而第二层循环就是在已知ai的情况下枚举 b[1~j), 所以可以承担这个功能</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ma<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   ma<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-背包模型"><a href="#3-背包模型" class="headerlink" title="3 背包模型"></a>3 背包模型</h3><p>1 多个花费问题：<a href="https://www.acwing.com/problem/content/description/1024/">宠物小精灵之收服</a> </p><p>该题有皮卡丘的精灵球和体力两个消耗品，所以 f 变成了二维数组，枚举体积变成枚举两层循环，枚举精灵球和体力。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment">// 枚举精灵球个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>m<span class="token punctuation">;</span>x<span class="token operator">&gt;=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">// 枚举体力</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2 求组合的数量：<a href="https://www.acwing.com/problem/content/description/280/">数字组合</a> </p><p>每个数字只能选一个，可以套用 <strong>01背包</strong>，f[i,j]表示从前 $i$ 个数中选，选中的数的和为 j 的方案数。那么集合属性不再是 max 了，而是求和，所以状态计算中改成求和。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//根据实际意义初始化，从前 0 个选数，和为0的方案是1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当每个数字可以选多个时，可以套用 <strong>完全背包</strong>。例：<a href="https://www.acwing.com/problem/content/1025/">买书</a>、<a href="https://www.acwing.com/problem/content/1023/">1021货币系统</a> </p><p>这里买书每本可以买多本，问买书的方案有多少种。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3 求数组的最大独立集 <a href="https://www.acwing.com/problem/content/534/">532货币系统</a> </p><p>从数组 a 选出最小的集合，条件为：选取集合中的数可以线性表示 数组 a 中的所有数。</p><p>将 a 从小到大排序，$a_i$ 观察能被 $a_{1\sim\ i-1}$ 表示出来</p><p>完全背包问题，将 $a_i$ 视为体积，问使用前 $i-1$ 个物品，$a_j$ 的体积为 $j$，问能否装满 $a_i$ 体积。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// f[j] 表示前 i-1 个物品能否表示第 i 个 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 这里只使用了前 i-1 个物品</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment">// 使用第 i 个物品</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4 单调队列优化的多重背包</p><p><a href="https://www.acwing.com/problem/content/6/">多重背包问题 III</a> </p><p>二进制优化时间复杂度 $O(NMlog(s))$，单调队列的优化 $O(NM)$。</p><p><a href="https://www.acwing.com/solution/content/53507/">题解 </a> </p><p>考虑用完全背包的方式取优化多重背包。将多重背包写成</p><script type="math/tex; mode=display">\begin{align}f(i,j) &=max(\ f(i-1,j)，f(i-1,j-v)+w，··· ，f(i-1,j-sv)+sw\\f(i,j-v) &=max(\ f(i-1,j-v)，f(i-1,j-2v)+w，··· ，f(i-1,j-(s+1)v)+sw\\f(i,j-2v) &=max(\ f(i-1,j-2v)，f(i-1,j-3v)+w，··· ，f(i-1,j-(s+2)v)+sw    \\&······\\j&=r+sv，r=为\ v\ 的余数0，1，2，···，v-1\\所以\ f(i,r+sv) &=max(\ f(i-1,r+sv)，f(i-1,r+(s-1)v)+w，··· ，f(i-1,r)+sw\\f(i,r+(s-1)v) &=max(\ f(i-1,r+(s-1)v)，f(i-1,r+(s-2)v)+w，··· ，f(i-1,r)+(s-1)w\\&······\\f(i,r)&=f(i-1,r)\end{align}</script><p>给每个物品按它的体积 v 的余数分类，余数：[0,v) </p><p>f[0],f[v],f[2v],···,f[kv]  </p><p>f[1],f[1+v],f[1+2v],···,f[1+kv] </p><p>······</p><p>f[j],f[j+v],f[j+2v],···,f[j+kv]</p><p>j 为 v 的余数。f[j+kv]是由前面不超过 s 的同类值传递得到的。</p><p>滑出窗口情况：因为只有s个物品，所以最多 -sv，超过 s 时要出队头，对应体积就是小于 k-sv 之外的要出队。</p><p>时间复杂度 nv(V/v)=nV，O(nV) </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 滑动窗口建立在 f 的上一次结果中</span>    cin<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>w<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>v<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment">// 拆分成 v 个类</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> hh<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 队列清空</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>k<span class="token operator">+=</span>v<span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token comment">// 滑出窗口，体积小于全拿时的体积</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token operator">-</span>s<span class="token operator">*</span>v<span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 用最大值(队头)更新 f，窗口在旧 f 滑动，因此备份 g</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt<span class="token punctuation">)</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">-</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注</span>            <span class="token comment">// 当前值比队尾的物品个数更好，队尾元素出队</span>            <span class="token comment">// g[q[tt]]-(q[tt]-j)/v*w&lt;=g[k]-(k-j)/v*w</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;=</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">-</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token operator">*</span>w<span class="token punctuation">)</span>  tt<span class="token operator">--</span><span class="token punctuation">;</span>            q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>   <span class="token comment">// 当前值入队</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：为什么选取最大可以放在while前面</p><p>f[i，j]=max(f[i-1，j], f[i-1，j-v]+w, f[i-1，j-2v]+2w… f[i-1，j-sv]+sw)</p><p>g[k]=f[i-1,k]，所以并不会漏掉 f[i-1,j] 项的。放在 q[++tt]=k 后面也没错。</p></blockquote><p>5 <a href="https://www.acwing.com/problem/content/7/">混合背包问题</a>，物品可以用 1 次，$s_i$ 次，无限次。</p><p>分别套用各自的模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>w<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 01背包</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 完全背包</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>   <span class="token comment">// 多重背包</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>v<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> hh<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>k<span class="token operator">+=</span>v<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token operator">-</span>s<span class="token operator">*</span>v<span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt<span class="token punctuation">)</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">-</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>k<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token operator">*</span>w<span class="token operator">&gt;=</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token operator">*</span>w<span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>                q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6 <a href="https://www.acwing.com/problem/content/8/">二维费用的背包问题</a>  </p><p>所选的物品含有两个条件，例如体积和重量，体积和价格。</p><p>例题：有 $N$ 件物品和一个容量是 $V$ 的背包，背包能承受的最大重量是 $M$。每件物品只能用一次。体积是 $v_i$，重量是 $m_i$，价值是 $w_i$ 。求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。</p><p>二维 f ，f[i,j]中 i 表示体积，j 表示价值。循环枚举两个费用即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>m<span class="token punctuation">,</span>w<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>M<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>m<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>m<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7 费用最多、恰好、至少问题</p><blockquote><p>费用最多是j：常见的背包都是此种情况，全部初始化为 0，不能枚举到 0</p><p>费用恰好是j：f[0]=0, 其他为正无穷，不能枚举到 0</p><p>费用至少是j：f[0]=0, 其他为正无穷，j 可以枚举到 0</p></blockquote><p><a href="https://www.acwing.com/problem/content/1022/">潜水员</a> ：氧气至少是 n，氮气至少是 m，求最小重量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// 可以枚举到 0，j-a&lt;0状态是合法的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>m<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9 背包问题的方案与方案数</p><p><a href="https://www.acwing.com/problem/content/12/">求背包问题的具体方案</a> </p><p>要求输出字典序最小，假设第一个物品在其中一个最优解中，那么该物品必选，然后问题转化为从 [2,n] 中寻找最优解。之前 f[i,j] 保存的是从前 i 个物品选择的最优解，所以在这题中应该表示从 [i,n] 中选择的最优解，所以要倒叙枚举每个物品递推式为：f[i,j]=max( f[i+1,j], f[i+1,j-v[i]]+w[i] )</p><p>在输出时，正着枚举物品；</p><ol><li>$f(i,m)=f(i+1,m-v[i])+w[i]\ \ 且\ \ f(i,m)\ne f(i+1,m)$ : 必须选 i 才能得到最优解</li><li>$f(i,m)\ne f(i+1,m-v[i])+w[i] $ : 任何最优解都不包括 i </li><li>$f(i,m)=f(i+1,m-v[i])+w[i]$ : 最优解可以有 i 也可以没有</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 倒叙求 f </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 输出字典序最小的方案</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>        j<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/11/">背包问题求方案数</a> </p><p>01 背包求方案数，先用二维数组分析，再按 f 优化的套路优化 g</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/202111232232683.png" alt="ee1acc2660"></p><p>与求最大价值的顺序相同，只是属性变为数量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ma<span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">)</span>     ma<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token operator">==</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> cnt<span class="token operator">=</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 不选 i 可以到最优解</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token operator">&amp;&amp;</span>ma<span class="token operator">==</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span>    <span class="token comment">// 选 i 也可以到最优解</span>             cnt<span class="token operator">=</span>cnt<span class="token operator">+</span>g<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">%</span>mod<span class="token punctuation">;</span>   f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ma<span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>res<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果定义为==不恰好==，那么 g[0,i] 都为 0，因为什么都不选对应一个方案。那么 g[i,j] 即为从前 i 个选，体积不超过 j 的最优方案的数量，所以最后 g[n,m]就是答案。</p><p>如果定义为==恰好==，g[0,i]，当 i&gt;1 时，不可能什么都不选但体积不为0，所以只需初始化 g[0,0]=0。答案需要枚举 <strong>体积</strong>，累积价值最大的数量。</p><p>10 <a href="https://www.acwing.com/problem/content/description/489/">金明的预算方案</a> </p><p>物品分为主件和附件，选择附件的前提是已经选择对应的主件，这是有限制的分组背包问题。</p><p>枚举主件物品，设 h 数组为临时数组，临时数组把主件选上，然后将附件视为 01 背包问题，枚举，然后将 h 数组的最大值保存到 f 数组即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>z<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 遍历主件</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v1<span class="token operator">=</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span>p1<span class="token operator">=</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span>id<span class="token operator">=</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v1<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 选上主件 初始化 f </span>        h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v1<span class="token punctuation">]</span><span class="token operator">+</span>p1<span class="token operator">*</span>v1<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>fu<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 遍历附件，已满足前提</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v2<span class="token operator">=</span>fu<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> p2<span class="token operator">=</span>fu<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token punctuation">;</span> k<span class="token operator">&gt;=</span>v1<span class="token operator">+</span>v2<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">// 01背包</span>            h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>k<span class="token operator">-</span>v2<span class="token punctuation">]</span><span class="token operator">+</span>v2<span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v1<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11 <a href="https://www.acwing.com/problem/content/10/">有依赖的背包问题</a> </p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/%E6%9C%89%E4%BE%9D%E8%B5%96%E7%9A%84%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98" alt="image-20211125210142607"> </p><p>对于父结点 x，将它体积作为分组对象，分为 0，1，···，m-v[x]。每次只能选择一个体积去做 <strong>分组</strong> 背包。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> mx<span class="token punctuation">)</span> <span class="token comment">// mx 表示父结点 x 以及子结点可用的体积</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>mx<span class="token operator">-</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>mx<span class="token operator">-</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">// 先给 x 腾出来空</span>            <span class="token comment">// 一次只能选取一个体积,一种体积代表一种最大组合</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>     f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 最后考虑根节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>mx<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token comment">// 选上 x </span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 选不下，因此要置 0</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> mx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 先把根节点放进去</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>mx<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>mx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>mx<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// 开始分组背包</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 枚举每一种体积</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 背包容量很大问题：</p><p>转换体积和价值，f[i] 表示价值为 i 时的最小体积。</p><h3 id="4-状态机模型"><a href="#4-状态机模型" class="headerlink" title="4 状态机模型"></a>4 状态机模型</h3><blockquote><p>状态机是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提高算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的自拍</title>
      <link href="/qi-ta/jia-mi-ce-shi/"/>
      <url>/qi-ta/jia-mi-ce-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/football_team.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序和归并排序</title>
      <link href="/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/"/>
      <url>/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h3><h4 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is love</title>
      <link href="/uncategorized/what-is-love/"/>
      <url>/uncategorized/what-is-love/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
