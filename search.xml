<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>是不是新建一个文件才能push</title>
      <link href="/uncategorized/shi-bu-shi-xin-jian-yi-ge-wen-jian-cai-neng-push/"/>
      <url>/uncategorized/shi-bu-shi-xin-jian-yi-ge-wen-jian-cai-neng-push/</url>
      
        <content type="html"><![CDATA[<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><ul><li><p><strong>请打开 “文件-&gt;偏好设置-&gt;Markdown-&gt;Markdown扩展语法”</strong></p></li><li><p><strong>并确保其中的五个选项都已经被勾选</strong></p></li><li><strong>当你不知道一种效果如何实现时，just click it!</strong></li></ul><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><p>输入[toc]即可生成目录</p></blockquote><p>[toc]</p><h1 id="一级标题-Ctrl-1"><a href="#一级标题-Ctrl-1" class="headerlink" title="一级标题 Ctrl + 1"></a>一级标题 Ctrl + 1</h1><h2 id="二级标题-Ctrl-2"><a href="#二级标题-Ctrl-2" class="headerlink" title="二级标题 Ctrl + 2"></a>二级标题 Ctrl + 2</h2><h3 id="三级标题-Ctrl-3"><a href="#三级标题-Ctrl-3" class="headerlink" title="三级标题 Ctrl + 3"></a>三级标题 Ctrl + 3</h3><h4 id="四级标题-Ctrl-4"><a href="#四级标题-Ctrl-4" class="headerlink" title="四级标题 Ctrl + 4"></a>四级标题 Ctrl + 4</h4><h1 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h1><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>加粗</strong></td><td>Ctrl + B</td></tr><tr><td><em>斜体</em></td><td>Ctrl + I</td></tr><tr><td><strong><em>斜体加粗</em></strong></td><td></td></tr><tr><td><del>删除线</del></td><td></td></tr><tr><td><u>下划线</u></td><td>Ctrl + U</td></tr><tr><td>==高亮==</td><td></td></tr><tr><td>我是^上标^</td><td></td></tr><tr><td>我是~下标~</td><td></td></tr><tr><td><a href="https://www.typora.io/">超链接</a></td><td>Ctrl + K，注意在编辑器中点击超链接需按住Ctrl键</td></tr><tr><td><a href="#表格">锚点</a></td><td>在超链接的圆括号处输入<code>井号+标题名称</code>即可</td></tr></tbody></table></div><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><blockquote><p>有时候你会想输出markdown的保留字（像是$+`\\等）</p><p>这时候你需要在这些字符前边加一个反斜杠(回车键上边那个)</p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>按 + 创建无编号列表<ul><li>按Tab进入下一级</li></ul></li><li>按Shift+Tab退回上一级</li></ul><ol><li>按<code>数字+句号</code>创建有序列表<ol><li>同样是按Tab进入下一级<ol><li>可以有很多级</li></ol></li></ol></li></ol><ul><li>[ ] 按<code>减号+空格+左方括号+空格+（右方括号+）空格</code>可以生成任务列表<ul><li>[ ] 同样按Tab可以进入下一级</li><li>[x] 左边的方框框可以勾选</li></ul></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>创建表格</td><td>Ctrl + T</td></tr><tr><td>创建表格</td><td>输入表头</td></tr><tr><td>新增行</td><td>Ctrl + 回车</td></tr><tr><td>退出表格</td><td>在最后一行按回车</td></tr><tr><td>更多选项</td><td>右击表格</td></tr></tbody></table></div><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>按&gt;键加空格创建引用</p><p>也可以Ctrl + Q快捷键来创建</p><blockquote><p>再按一次就能在引用中引用</p></blockquote><p>使用Shift+Tab可以退回上级引用</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote><p>参考链接功能需要两个部分才能生效，一部分在正文中，用于生成角标<sup><a href="#fn_1" id="reffn_1">1</a></sup>。</p></blockquote><blockquote id="fn_1"><sup>1</sup>. 另一部分通常在文章末尾，用于生成详细内容。注意两处方括号内的内容应完全一致！<a href="#reffn_1" title="Jump back to footnote [1] in the text."> ↩</a></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr><p>可以通过连续三个以上的<code>-</code>生成分割线</p><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><!-- 注释仅在编辑时可见，编译后生成的文件是不含注释的 --><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>行内代码</strong></p><blockquote><p><code>输入一对顿号键(就在esc下边，记得要在英文下输入)</code></p></blockquote><p><strong>代码段</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入连续三个顿号键+语言名称'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以看到是能够高亮语法的,就很舒服'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以在最后一行按 Ctrl+回车 退出代码编辑'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><p>可以按 Ctrl+Shift+I 插入图片</p></li><li><p>也可以直接Ctrl+V复制到这里边</p></li><li>方括号里填图片名称，圆括号内填路径</li><li>==<strong>注意可以在 “文件-&gt;偏好设置” 里设置自动复制图片到本地目录，防止图片源失效</strong>==</li></ul><p><img src="D:\Desktop\TyporaLearning-master\typara学习.assets\image-20200812165450397.png" alt="图片名称"></p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 哈哈con<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 没想到吧op2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 我还能画流程图op3<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 只要在创建代码段时选择语言为flowed<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 语法很简单，一看就会st<span class="token operator">-</span><span class="token operator">&gt;</span>con<span class="token function">con</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">con</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>conop2<span class="token operator">-</span><span class="token operator">&gt;</span>op3op3<span class="token operator">-</span><span class="token operator">&gt;</span>ed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><blockquote><p><strong>Typora对LaTeX的数学公式有很好的支持，基本上都可以使用</strong></p><p><strong>在此只列出一些常用的</strong>：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">公式</th></tr></thead><tbody><tr><td style="text-align:center">行内公式请使用：<script type="math/tex">公式内容</script></td></tr><tr><td style="text-align:center">换行公式请使用：$$$公式内容$$$</td></tr><tr><td style="text-align:center">一般的做法是先输好一对$，再往中间填公式</td></tr><tr><td style="text-align:center">输入时会在光标下方弹出预览，正常为白色</td></tr><tr><td style="text-align:center">如果出错就会变成红色</td></tr><tr><td style="text-align:center">$LaTeX$</td></tr><tr><td style="text-align:center">$\alpha\beta\gamma$</td></tr><tr><td style="text-align:center">$x_i$,$x^2$,$\sqrt[3]{x+y}$</td></tr><tr><td style="text-align:center">更详细的请参考 <a href="https://github.com/CTeX-org/lshort-zh-cn">lshort-zh-cn</a> 中关于数学公式的描述</td></tr></tbody></table></div><h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><blockquote><p>怎么说呢…可能…还是有点用的…吧<span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><blockquote><p>除了几款默认主题，Typora 的主题是可以自定义的，选择 “偏好设置-&gt;外观-&gt;打开主题文件夹”</p><p>这里存放了Typora几个默认主题的CSS样式</p><p>你可以编写自己喜欢的主题，并把文件放在此处就可以了在Typora中切换了</p></blockquote><h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><blockquote><p>点击菜单中的 ”导出“ 即可，Typora支持多种格式导出</p><p>一般我们选择图片或PDF格式导出</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的自拍</title>
      <link href="/qi-ta/jia-mi-ce-shi/"/>
      <url>/qi-ta/jia-mi-ce-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/football_team.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序和归并排序</title>
      <link href="/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/"/>
      <url>/suan-fa/kuai-su-pai-xu-he-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h3><h4 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is love</title>
      <link href="/uncategorized/what-is-love/"/>
      <url>/uncategorized/what-is-love/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法笔记</title>
      <link href="/suan-fa/suan-fa-bi-ji/"/>
      <url>/suan-fa/suan-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-基础算法"><a href="#第一章-基础算法" class="headerlink" title="第一章 基础算法"></a>第一章 基础算法</h2><h3 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h3><h4 id="1-1-1-快速排序"><a href="#1-1-1-快速排序" class="headerlink" title="1.1.1 快速排序"></a>1.1.1 快速排序</h4><ul><li>确定分界点，这里以中间点作为分界点 x=q[l+r&gt;&gt;1]</li><li>划分两个区间，左边区间 $\le x$, 右边 区间 $\ge x$ </li><li>递归处理左右两个区间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r){    if (l &gt;= r) return;    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];    while (i &lt; j)    {        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        // 改为从大到小排序        // do i++; while(q[i] &gt; x); // 这里和下面        // do j--; while(q[j] &lt; x); // 这行的判断条件改一下        if (i &lt; j) swap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：求第k小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int quick_sort(int l,int r,int k){    if(l&gt;=r) return q[l];    int x=q[r+l&gt;&gt;1],i=l-1,j=r+1;    while(i&lt;j)    {        do i++; while(q[i]&lt;x);        do j--; while(q[j]&gt;x);        if(i&lt;j) swap(q[i],q[j]);    }    if(j-l+1&gt;=k)   return quick_sort(l,j,k);  // 第k小在左边    else return quick_sort(j+1,r,k-(j-l+1));  // 第k小一定在右边}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-归并排序"><a href="#1-1-2-归并排序" class="headerlink" title="1.1.2 归并排序"></a>1.1.2 归并排序</h4><ul><li>确定分界点,中间： l+r&gt;&gt;1</li><li>先递归排序左右两个区间</li><li>合并子问题</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int q[], int l, int r){    if(l &gt;= r) return;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>求逆序对数</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ll merge_sort(int l, int r){    if(l &gt;= r) return 0;     //递归的终止情况    int mid = l + r &gt;&gt; 1;  //第一步：分成子问题    //第二步：递归处理子问题    ll res=merge_sort(l, mid) + merge_sort(mid + 1, r);    //第三步：合并有序的两段，i，j为两段的起点    int k = 0, i = l, j = mid + 1;    while(i &lt;= mid &amp;&amp; j &lt;= r)        if(q[i] &lt;= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++],res+=mid-i+1;    // 对当前指针到终点的赋值    while(i &lt;= mid) tmp[k++] = q[i++];    while(j &lt;= r) tmp[k++] = q[j++];// 赋值回原数组    for( i = l,k=0; i &lt;= r; i++, k++) q[i] = tmp[k];    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-二分"><a href="#1-2-二分" class="headerlink" title="1.2 二分"></a>1.2 二分</h3><p><strong>整数二分</strong>：分成两块，一左一右，low一直位于作左边，top一直位于右边，最终low在左边块最右，top在右边那块最左边。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(low+1!=top){int mid=low+top&gt;&gt;1;    if(check(mid)) low=mid;  // low始终在ok的一块    else top=mid;     // top始终在不符合的那块}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小数二分</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(top-low&gt;exp){    double mid=(low+top)/2;    if(check(low)) top=mid;    else low=mid;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-高精度"><a href="#1-3-高精度" class="headerlink" title="1.3 高精度"></a>1.3 高精度</h3><h4 id="1-3-1-大数加法"><a href="#1-3-1-大数加法" class="headerlink" title="1.3.1 大数加法"></a>1.3.1 大数加法</h4><p>将数存在数组里面，数组倒序储存方便计算。</p><p>思想是模拟。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_add(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||i&lt;B.size();i++)    {        if(i&lt;A.size()) t+=A[i];        if(i&lt;B.size()) t+=B[i];        res.push_back(t%10);        t/=10;    }    if(t) res.push_back(t);   // 最后一位也可能进位    return res;}//调用vector&lt;int&gt; ans=big_add(A,B);for(int i=ans.size()-1;i&gt;=0;i--)  cout&lt;&lt;ans[i];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2-大数减法"><a href="#1-3-2-大数减法" class="headerlink" title="1.3.2 大数减法"></a>1.3.2 大数减法</h4><p>计算 A-B，默认 A&gt;B，如果 A&lt;B，则去计算 -(B-A).</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;int&gt; big_sub(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size();i++)    {        t+=A[i];        if(i&lt;B.size()) t-=B[i];        if(t&gt;=0) res.push_back(t),t=0;   // 不用借位        else res.push_back(t+10),t=-1;  // 借位    }    while(res.size()&gt;1&amp;&amp;res.back()==0) res.pop_back(); // 去前导零    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3-大数乘法"><a href="#1-3-3-大数乘法" class="headerlink" title="1.3.3 大数乘法"></a>1.3.3 大数乘法</h4><p>一般是一个大数乘一个小数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b){    vector&lt;int&gt; res;    int t=0;    for(int i=0;i&lt;A.size()||t;i++)    {        if(i&lt;A.size())  t+=A[i]*b;        res.push_back(t%10);        t/=10;    }    while(res.size()&gt;1&amp;&amp;res.back()==0)   // 去前导零        res.pop_back();    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-4-大数除法"><a href="#1-3-4-大数除法" class="headerlink" title="1.3.4 大数除法"></a>1.3.4 大数除法</h4><p>一般是一个大数 ÷ 一个小数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; ans;  // 商int y=0;   // 余数void div(vector&lt;int&gt; A,int b)  // A 还是倒着存{    y=0;for(int i=A.size()-1;i&gt;=0;i--)    {        y=y*10+A[i];        res.push_back(y/b);        y%=b;    }    reverse(ans.begin(),ans.end());    while(ans.size()&gt;0&amp;&amp;ans.back()==0)         ans.pop_back();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-5-压位"><a href="#1-3-5-压位" class="headerlink" title="1.3.5 压位"></a>1.3.5 压位</h4><p>由于数组存的数是int类型，所以只存个位数太过浪费。所以考虑将几个数合并成一位存储。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int power=3,base=1000; // 需要同时改vector&lt;int&gt; big(string s)  // 将字符串大数转化成数组压位的大数{    vector&lt;int&gt; A;    reverse(s.begin(),s.end());  // 调整为个位在前    int i,tem=0,w=1;    for(i=0;i&lt;s.size();i++)    {        if(i%power==0&amp;&amp;i)        {            A.push_back(tem);  tem=0;            w=1;        }        tem+=w*(s[i]-'0');  w*=10;    }    if(w!=1) A.push_back(tem);    return A;}bool cmp(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B) // 和普通高精一样{    if(A.size()==B.size())    {        for(int i=A.size()-1;i&gt;=0;i--)        {            if(A[i]&gt;B[i]) return 1;            else if(A[i]&lt;B[i]) return 0;        }        return 1;    }    if(A.size()&gt;B.size()) return 1;    return 0;}vector&lt;int&gt; add(vector&lt;int&gt; &amp;A ,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; C;    int la=A.size(), lb=B.size();    int l=max(la,lb);    int t=0;    for(int i=0;i&lt;l;i++)    {        int tem=0;        if(i&lt;la) tem+=A[i];        if(i&lt;lb) tem+=B[i];        C.push_back(tem+t);        t = C[i]/base;     // 进位        C[i] %= base;    }    if(t) C.push_back(t);    return C;}vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B){    vector&lt;int&gt; C;    int t=0;  // 判断是否有借位    for(int i=0;i&lt;A.size();i++)  // A&gt;=B    {        int tem=A[i]-t;  t=0;        if(i&lt;B.size()) tem-=B[i];        if(tem&lt;0)        {            tem+=base; t=1;        }        C.push_back(tem);    }    while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back(); // 去前导零    return C;}void print(vector&lt;int&gt; &amp;A){    int t=A.size();    cout&lt;&lt;A[t-1];    for(int i=t-2;i&gt;=0;i--)        cout&lt;&lt;setw(power)&lt;&lt;setfill('0')&lt;&lt;A[i];    cout&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-前缀和与差分"><a href="#4-前缀和与差分" class="headerlink" title="4 前缀和与差分"></a>4 前缀和与差分</h3><p>前缀和与差分是相反的过程。</p><h4 id="4-1-前缀和"><a href="#4-1-前缀和" class="headerlink" title="4.1 前缀和"></a>4.1 前缀和</h4><p><strong><em>可以快速求出数组某区间内的数值和</em></strong></p><p>一维数组：sum[i]=sum[i-1]+a[i]</p><p>二位数组：sum[i,j]=sum[i-1,j]+sum[i,j-1]-sum[i-1,j-1]+a[i,j]</p><h4 id="4-2-差分"><a href="#4-2-差分" class="headerlink" title="4.2 差分"></a>4.2 差分</h4><p><strong><em>可以快速处理区间同时加减一个数的问题</em></strong></p><p>一维数组：</p><p>已知数组 $a_i$ , 构造 $a_i=b_1+b_2+···+b_i$，即 b 数组前缀和是 a</p><p>通过差分构造: b[i]=a[i]-a[i-1]</p><p>在[l,r]区间加一个数 c 时：b[l]+=c,b[r+1]-=c 。</p><p>通过求前缀和得出 操作后的 a 数组。</p><p>这是离线算法，时间复杂度O(n), 树状数组是在线算法。</p><p>二维数组：</p><p>构造差分数组：b[i,j]=a[i,j]-a[i-1,j]-a[i,j-1]+a[i-1,j-1]</p><p>在(x~1~,y~1~)和(x~2~,y~2~)构成的矩形矩阵内加 c：</p><p>对差分数组操作：b[x~1~,y~1~]+=c, b[x~1~+1,y~2~+1]+=c, b[x~1~,y~2~+1]-=c, b[x~2~+1,y~1~]+=c</p><p>(后续补图)</p><p>最后通过二维数组前缀和求出改变后的数组</p><h3 id="5-离散化"><a href="#5-离散化" class="headerlink" title="5 离散化"></a>5 离散化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(dif,dif+cnt);    // 排序int m=unique(dif,dif+cnt)-dif;   // 去重，m 返回不重复的数int p=lower_bound(dif,dif+m,x)-dif;  // 二分取离散化后 x 映射的位置，后面就用这个位置代表 x 了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第二章-数据结构"><a href="#第二章-数据结构" class="headerlink" title="第二章 数据结构"></a>第二章 数据结构</h2><h3 id="2-1-链表"><a href="#2-1-链表" class="headerlink" title="2.1 链表"></a>2.1 链表</h3><p><strong>单链表</strong></p><p>结构体形式：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{int val;node *next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟单链表: 用邻接表,可以用来存图和树</p><ul><li><p>head：头结点的下标，初始为 -1</p></li><li><p>e[N]：结构体中的 val，e[i] 表示结点 i 的值</p></li><li><p>ne[N]：结构体中的 next 指针，ne[i]表示结点 i 的next指针</p></li><li><p>idx：下表索引，第 idx 个插入链表的</p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int head=-1,e[N],ne[N],idx;void add(int x) // 添加值为 x 的结点,头插法{    e[idx]=x;    ne[idx]=head;    head=idx++;}void add_k(int k,int x)  // 插入下表为k的后面{    e[idx]=x;    n[idx]=ne[k];    ne[k]=idx++;}void dele_k(int k,int x) // 将下标为k的后面那个点删去{    ne[k]=ne[ne[k]];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双链表</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{    int val;    node *nextL,*nextR;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组模拟双链表</p><p>l[i],r[i] 表示 结点 i 的左右指针</p><p>0 表示左端点，1 表示右端点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int e[N],l[N],r[N],idx;r[0]=1; l[1]=0;  idx=2;  // 初始化，互相指void add(int k,int x) // 下表是 k 的右边插入 x{    e[idx]=x;    r[idx]=r[k];   // 新点右指针指向右边的点    l[idx]=k;      // 新点的左指针指向 k    l[r[k]]=idx;  // 右边的做指针指向新插入的点    r[k]=idx++;   // k 的右指针指向新插入的点}void remove(int k)  // 删去下表为 k 的点{    r[l[k]]=r[k];    l[r[k]]=l[k];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-模拟栈和队列"><a href="#2-2-模拟栈和队列" class="headerlink" title="2.2 模拟栈和队列"></a>2.2 模拟栈和队列</h3><p>先进后出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stk[N],tt=0;stk[++tt]=x;  // 插入tt--;  //弹出tt&gt;0   //不空,否则是空的stk[tt]  // 是栈顶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈的应用：表达式求值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=1000005;// 中序遍历int stk1[N],tt1;char stk2[N];    // 栈里的运算符运算级是递增的int tt2; // 还可以加新的运算符unordered_map&lt;char,int&gt; mp{{'+',1},{'-',1},{'*',2},{'/',2}};void eval(){    // 从后往前运算    int a=stk1[tt1--];  // 运算符后面的数    int b=stk1[tt1--];  // 运算符前面的数    char c=stk2[tt2--];    int res=0;    if(c=='+') res=b+a;    else if(c=='-')  res=b-a;    else if(c=='*')  res=b*a;    else res=b/a;    stk1[++tt1]=res;}int main(){    string s;  cin&gt;&gt;s;    for(int i=0;i&lt;s.length();i++)    {        if(isdigit(s[i]))        {            int j=i,t=0;            while(isdigit(s[j])&amp;&amp;j&lt;s.length())            {                t=t*10+s[j++]-'0';            }            stk1[++tt1]=t;            i=j-1;        }        else if(s[i]=='(') stk2[++tt2]='(';        else if(s[i]==')')        {            while(stk2[tt2]!='(')  eval();            tt2--;  // 弹出左括号        }        else  // 除括号数字以外的运算符        {            // 当前运算符小于栈顶，说明左右子树都遍历完了，此时可以计算出前面的值            while(tt2&amp;&amp;mp[s[i]]&lt;=mp[stk2[tt2]])                eval();            stk2[++tt2]=s[i];        }    }    while(tt2) eval();    cout&lt;&lt;stk1[tt1]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先进先出  $\gets $hh <em> </em> <em> </em> tt$\gets$，从 tt 处加，从 hh 处出</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int q[N],hh,tt=-1;  // hh 是队头，tt是队尾q[++tt]=x;  // 插入队列hh++;  // 弹出hh&lt;=tt  // 不空 否则是空的q[hh]  // 队头q[tt]  // 队尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-单调栈和单调队列"><a href="#2-3-单调栈和单调队列" class="headerlink" title="2.3 单调栈和单调队列"></a>2.3 单调栈和单调队列</h3><p><strong>单调栈</strong>：栈内的元素是具有单调性的</p><p>应用于：找数组中一个数的左边或者右边第一个比它大或者小的数</p><p>例题：<a href="https://www.acwing.com/problem/content/832/">单调栈</a> 给定N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int a[N],stk[N],tt;int main(){    int n;  cin&gt;&gt;n;    for(int i=0;i&lt;n;i++)    {        int x;   cin&gt;&gt;x;        while(x&lt;=stk[tt]&amp;&amp;tt)             tt--;    // 弹出栈内比当前元素大的，保证栈的单调递增的        if(tt==0)  cout&lt;&lt;-1&lt;&lt;" "&lt;&lt;endl;        else cout&lt;&lt;stk[tt]&lt;&lt;" "&lt;&lt;endl;        stk[++tt]=x;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单调队列</strong>：队列元素是单调的，是双端队列</p><p>应用于<strong>滑动窗口</strong>求最值</p><p>例：<a href="https://www.acwing.com/problem/content/156/">滑动窗口</a>，求窗口大小为 k 的最大和最小值</p><p>维护两个单调队列</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 求最小值模板int q[N],hh,tt=-1; // 队列保存下标int ans[N],cnt;// 维护单调性，将队列里后面的大于当前数的删去，去尾while(x&lt;=a[q[tt1]]&amp;&amp;hh&lt;=tt) tt--;// 删头,与 i 距离超过 k 的要删去if(i-q[hh]&gt;=k&amp;&amp;hh&lt;=tt) hh++;q[++tt]=i;  // 将该元素入队if(i&gt;=k-1)  ans[cnt++]=q[hh];  // 存入答案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-KMP"><a href="#2-4-KMP" class="headerlink" title="2.4 KMP"></a>2.4 KMP</h3><p>next[i]: 含义是以 i 为终点的最长后缀，从下标 0 开始，next[0]=-1，next[1]=0</p><p>字符串 p 的 next 值跟当前位无关，所以第 i 位匹配相等时 next[i+1]=j+1, 简写位 next[++i]=++j </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int nxt[N];   // p 要回退的位置void get_next(string p)  // 求模式串next{    nxt[0]=-1;    int i=0, j=-1; // i 为正在匹配的字符的位置，j 表示后缀长度    while(i&lt;p.length())    {        if(j==-1||p[i]==p[j])   nxt[++i]=++j; // 相等，后缀长度++        else  j=nxt[j];    // 回退了j,寻找更小的最大后缀    }}// s是长串，p 是短串是已知next的串void kmp(string s,string p)  {    int i=0,j=0;    int sl=s.length(),pl=p.length();    while(i&lt;sl)    {        if(j==-1||s[i]==p[j]) // 当前匹配成功，都往后移一位            i++, j++;        else  j=nxt[j];   // 匹配失败往前退，相当于向左挪短的串         if(j==p.length()) cout&lt;&lt;i-j&lt;&lt;" "; //输出匹配成功的起始下标    }}// 调用get_next(p);kmp(s,p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Trie树"><a href="#2-5-Trie树" class="headerlink" title="2.5 Trie树"></a>2.5 Trie树</h3><p>是一个能高效地存储和查找字符串集合的数据结构</p><p>建立树，就是向一个集合添加字符串的过程</p><p>查找字符串的数量和建立树类似</p><p>图</p><p><a href="https://www.acwing.com/problem/content/837/">模板题</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int son[N][26];  // 当前结点的儿子，儿子最多有26个，因为小写字母只有26个int cnt[N];    // 打标记，以第 i 字母结尾的字符串的个数int idx;       // 初始化为0，根结点是0void insert(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0)    // p 下不存在儿子 u            son[p][u]=++idx;        p=son[p][u];   // 往下走    }    cnt[p]++;  // 个数+1}int query(char s[]){    int p=0;   // 从根结点开始    for(int i=0;s[i];i++)    {        int u=s[i]-'a';        if(son[p][u]==0) return 0;        p=son[p][u];    }    return cnt[p];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Trie 另一个应用：存储二进制数</p><p><a href="https://www.acwing.com/problem/content/145/">最大异或对</a></p><h3 id="2-6-并查集"><a href="#2-6-并查集" class="headerlink" title="2.6 并查集"></a>2.6 并查集</h3><p>将两个集合合并； 询问两个元素是否在同一个集合中</p><p>基础并查集：<a href="https://www.acwing.com/problem/content/838/">模题合并集合</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;=n;i++)     p[i]=i;   // 初始化 p 数组，自成一派int find(int x)  // 返回 x 祖宗结点并路径压缩{return p[x]==x?x:p[x]=find(p[x]);}void merge(int x,int y) // 合并集合{    int u=find(x),v=find(y);    p[u]=v;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展应用：</strong> 维护并查集附加信息</p><p><a href="https://www.acwing.com/problem/content/839/">连通块数量</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 实时查询某元素所在集合中元素的数量// 在合并时记录，只维护根结点对应的 cntvoid merge(int x,int y){    int u=find(x),v=find(y);    if(u!=v)      {        p[u]=v;    // 将祖宗为 u 所在的集合合并到 v 所在的集合        cnt[v]+=cnt[u];   // 祖宗 v 的数量增加了    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展应用：维护当前点到根结点的距离</p><p><a href="https://www.acwing.com/problem/content/description/242/">食物链</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=50005;int p[N],ans,dis[N];int find(int x){    if(p[x]!=x)    {        int fa = find(p[x]);        dis[x] += dis[p[x]];        p[x] = fa;    }    return p[x];}int main(){    int n,m;  scanf("%d%d",&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++) p[i]=i;    while(m--)    {        int f,a,b;  scanf("%d%d%d",&amp;f,&amp;a,&amp;b);        if(a&gt;n||b&gt;n) {ans++; continue;}        int x=find(a);        int y=find(b);        if(f==1)        {            if(x==y&amp;&amp;(dis[b]-dis[a])%3) ans++;            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+3)%3;            }        }        else        {            if(a==b) ans++;            else if(x==y&amp;&amp;(dis[a]-dis[b]-1)%3)            {                ans++;            }            else if(x!=y)            {                p[x]=y;                dis[x]=(dis[b]-dis[a]+1+3)%3;            }        }    }    printf("%d",ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-堆"><a href="#2-7-堆" class="headerlink" title="2.7 堆"></a>2.7 堆</h3><p>堆是一棵完全二叉树，顶点取最值</p><p><img src="https://cdn.jsdelivr.net/gh/honlzl/picgo_public/img/Algorithm/%E5%A0%86.png" alt=""></p><p>由于编号位 i 的父结点的左结点为 2i，右结点为 2i+1，所以用保存堆。</p><p>以小根堆为例</p><p>down操作：把一个大数往下移，up操作，把小数往上移</p><blockquote><p>维护一个数组集合, heap[size]表示最后一个，heap[1]表示第一个即堆顶</p><ul><li>插入一个数         heap[++size]=x; up(size);</li><li>求集合中的最小值    heap[1];</li><li>删除集合中的最小值  heap[1]=heap[size]; size—; down(1);</li><li>删除任意一个数      heap[k]=heap[size]; size—; down(k); up(k);</li><li>修改任意一个元素    heap[k]=x; down(k); up(k);</li></ul></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1// ph[k]存储第k个插入的点在堆中的位置// hp[k]存储堆中下标是k的点是第几个插入的// ph[k]=j, hp[j]=k, 二者是相反的int h[N],ph[N],hp[N],idx;void heap_down(int a,int b){    swap(ph[hp[a]],ph[hp[b]]);    swap(hp[a],hp[b]);    swap(h[a],h[b]);}void down(int u){int t=u;  // t 表示值最小的编号    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) // 判断左儿子        t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) // 判断右儿子        t = 2*u+1;    if(u != t)  // t 不是本身，即 u 与两个儿子相比不是最小的    {        heap_swap(u,t);        down(t);    }}void up(int u){    while(u/2 &amp;&amp; h[u] &lt; h[u/2])    {        heap_swap(u, u/2);        u &gt;&gt;= 1;    }}// 最后一层不用downfor(int i=n/2; i; i--)  down(i);  // 建堆 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆的应用：<strong>堆排序</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int h[N],idx;void down(int u){    int t=u;   // 三个点的最小值    if(2*u &lt;= idx &amp;&amp; h[2*u] &lt; h[t]) t=2*u;    if(2*u+1 &lt;= idx &amp;&amp; h[2*u+1] &lt; h[t]) t=2*u+1;    if(t!=u)    {        swap(h[u],h[t]);        down(t);    }}int main(){    int n,m; scanf("%d%d",&amp;n,&amp;m);    idx=n;    for(int i=1; i&lt;=n; i++)  scanf("%d",&amp;h[i]);    for(int i=n/2; i; i--) down(i);    while (m -- )    {        printf("%d ",h[1]);        h[1]=h[idx]; idx--; // 取出堆顶        down(1);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-哈希表"><a href="#2-8-哈希表" class="headerlink" title="2.8 哈希表"></a>2.8 哈希表</h3><p>储存结构：开放寻址法，拉链法。</p><p><strong>拉链法</strong>：将大数取模，将相同模的组成一个链表</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void insert(int x){    int k = (x%mod+mod)%mod; // mod 要选一个质数使得链尽可能短    e[idx]=x;    ne[idx]=h[k]; // h[k] 表示头结点    h[k]=idx++;}void query(int x){    int k=(x%mod+mod)%mod;    for(int i=h[k];i!=-1;i=ne[i]) // 在链中寻找    {        if(e[i]==x)  return 1;    }    return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开放寻址法</strong>：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int N=1e5+5,inf=0x3f3f3f3f;h[2*N];    mod=200003; // mod 选小于 N 但尽量大的质数memset(h,0x3f,sizeof(h));int query(int x){    int k=(x%mod+mod)%mod;    while(h[k]!=inf &amp;&amp; h[k]!=x)    {        k++;        if(k==N) k=0;  // 后面用完了，从起点重新找位置    }    return k;  // 存在则返回 k 的下标，不存在则返回一个空的下标}// 调用int k=query(x);if(op[0]=='I')  h[k]=x;else{    if(h[query(x)]!=inf) printf("Yes\n");    else printf("No\n");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串哈希</strong>：把一个字符串变成一个 p 进制数字，实现不同的字符串映射到不同的数字，即不同点字符串有不同的哈希值。。</p><p>对形如 $ c_1c_2c_3···c_{n-1}c_n $ 的字符串，采用Ascii码乘 P 的次方来计算哈希值。映射公式为：</p><script type="math/tex; mode=display">(A_1\times P^{n-1}+A_2\times P^{n-2}+···+A_{n-1}\times P^1+X_n\times P^0)\ \ mod\ \ Q\\Q=2^{64}</script><p>对一个字符串求哈希值：h[i+1]=h[i]*P+s[i]</p><p>某段字符串的哈希值: h[l,r]=h[r]-h[l-1]*P^r-l+1^ </p><p>区间和公式的理解: ABCDE 与 ABC 的前三个字符值是一样，只差两位，<br>乘上 P^2^ 把 ABC 变为 ABC00，再用 ABCDE - ABC00 得到 DE 的哈希值。</p><p>模板题：<a href="https://www.acwing.com/problem/content/843/">字符串哈希</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef unsigned long long ull;const int N = 1e5+5, P=131; //P 取131或13331，经验值ull h[N];  // 前i 字符串的哈希值ull p[N];int n,q;char s[N];ull get(int l,int r){    return h[r]-h[l-1]*p[r-l+1];}int main(){scanf("%d%d%s",&amp;n,&amp;q,s+1); // 要从 1 开始    p[0]=1;    for(int i=1;i&lt;=n;i++)    {        p[i]=p[i-1]*P;        h[i]=h[i-1]*P+s[i];  // 字符串变成了 P进制数    }    while(q--)    {        int l1,r1,l2,r2;        scanf("%d%d%d%d",&amp;l1,&amp;r1,&amp;l2,&amp;r2);        if(get(l1,r1)==get(l2,r2)) printf("Yes\n");        else printf("No\n");    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三章-搜索与图论"><a href="#第三章-搜索与图论" class="headerlink" title="第三章 搜索与图论"></a>第三章 搜索与图论</h2><h3 id="3-1-存图方式"><a href="#3-1-存图方式" class="headerlink" title="3.1 存图方式"></a>3.1 存图方式</h3><h4 id="3-1-1-vector存图"><a href="#3-1-1-vector存图" class="headerlink" title="3.1.1 vector存图"></a>3.1.1 vector存图</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">vector&lt;node&gt; G[N];G[u].push_back(v); // 加边for(int i=0;i&lt;G[x].size();i++){    int y=G[x][i]; // 遍历边 x-&gt;y}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-邻接表"><a href="#3-1-2-邻接表" class="headerlink" title="3.1.2 邻接表"></a>3.1.2 邻接表</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 对于每个点k，开一个单链表，存储k所有可以走到的点// h[k] 存储这个单链表的头结点// e[k] 一条边的终点// w[k] 存储边的权值// ne[k] 表示下一个点的下标，next指针// idx 存储结点编号int h[N], e[N], w[N], ne[N], idx;// 添加一条边a-&gt;b，权值为c，头插法void add(int a, int b, int c){    e[idx] = b, ne[idx] = h[a], w[idx]=c, h[a] = idx ++ ;}// dfs遍历int dfs(int u){    st[u] = true; // st[u] 表示点u已经被遍历过    for (int i = h[u]; i != -1; i = ne[i])  // 找以 u 为起点的边    {        int j = e[i];    // 这条边的起点为 u ，终点为 j        if (!st[j]) dfs(j);    }}// bfs遍历queue&lt;int&gt; q;st[1] = true; // 表示1号点已经被遍历过q.push(1);while (q.size()){    int t = q.front();  q.pop();    for (int i = h[t]; i != -1; i = ne[i])    {        int j = e[i];        if (!st[j])        {            st[j] = true; // 表示点j已经被遍历过            q.push(j);        }    }}// 初始化idx = 0;memset(h, -1, sizeof h);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-DFS"><a href="#3-2-DFS" class="headerlink" title="3.2 DFS"></a>3.2 DFS</h3><p>n个数的全排列：<a href="https://www.acwing.com/problem/content/844/">排列数字</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void dfs(int t){    if(t==n)    {        for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;" ";        cout&lt;&lt;endl;        return;    }    for(int i=1;i&lt;=n;i++)    {        if(!vis[i])        {            vis[i]=1;    ans[t+1]=i;            dfs(t+1);    vis[i]=0;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-BFS"><a href="#3-3-BFS" class="headerlink" title="3.3 BFS"></a>3.3 BFS</h3><h3 id="3-4-拓扑排序"><a href="#3-4-拓扑排序" class="headerlink" title="3.4 拓扑排序"></a>3.4 拓扑排序</h3><p>记录入度，依次删度为0的点</p><h3 id="3-5-最短路"><a href="#3-5-最短路" class="headerlink" title="3.5 最短路"></a>3.5 最短路</h3><h4 id="3-5-1-Dijkstra"><a href="#3-5-1-Dijkstra" class="headerlink" title="3.5.1 Dijkstra"></a>3.5.1 Dijkstra</h4><p>Dijkstra朴素版：时间复杂度$ O(n^2) $ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int g[N][N];  // 存储每条边int dist[N];  // 存储1号点到每个点的最短距离bool st[N];   // 存储每个点的最短路是否已经确定// 求1号点到n号点的最短路，如果不存在则返回-1int dijkstra(){    memset(dist, 0x3f, sizeof dist);    dist[1] = 0;    for (int i = 0; i &lt; n - 1; i ++ )    {        int t = -1;     // 在还未确定最短路的点中，寻找距离源点最小的点        for (int j = 1; j &lt;= n; j ++ )            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))                t = j;        // 用t更新其他点的距离        for (int j = 1; j &lt;= n; j ++ )            dist[j] = min(dist[j], dist[t] + g[t][j]);        st[t] = true;    }    if (dist[n] == 0x3f3f3f3f) return -1;    return dist[n];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆优化版Dijkstra</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 结构体优先队列struct node{    int u,w;    bool operator &lt; (const node &amp;t)const // 小顶堆    {        return w &gt; t.w;    }}priority_queue&lt;node&gt; q;// pair 优先队列，先比较 firsttypedef pair&lt;int,int&gt; piipriority_queue&lt;pii, vector&lt;pii &gt;,greater&lt;pii &gt; &gt; q; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void add(int x,int y,int z){    e[idx]=y; w[idx]=z; ne[idx]=h[x]; h[x]=idx++;}void dijkstra(){    priority_queue&lt;node&gt; q;    q.push({1,0});    dis[1]=0;    while(!q.empty())    {        int u=q.top().u,ww=q.top().w;  q.pop();        //if(st[u]) continue;   st[u]=1;        if(dis[u]!=ww) continue;  // 两种方法节约时间        for(int i=h[u];i!=-1;i=ne[i])        {            int v=e[i];            if(dis[v]&gt;dis[u]+w[i])            {                dis[v]=dis[u]+w[i];                q.push({v,dis[v]});            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-2-Bellman-Ford"><a href="#3-5-2-Bellman-Ford" class="headerlink" title="3.5.2 Bellman-Ford"></a>3.5.2 Bellman-Ford</h4><p>求最多经过 k 条边能到达的最短路   O(nm)</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Edge  // 结构体直接存图{    int a,b;  //a -&gt; b    int w;  }edge[N];int dis[N],back[N];  // back 为备份的上一次 dis 数组void bellman_ford(){    memset(dis,0x3f,sizeof(dis));    dis[1]=0;    for(int i=0;i&lt;k;i++)    {        memcpy(back,dis,sizeof(dis));        for(int j=0;j&lt;m;j++)        {            int a=edge[j].a,b=e[j].b,w=e[j].w;            dis[b]=min(dis[b],back[a]+w); // 用back更新        }    }}if(dis[n]&gt;inf/2)   // 因为存在负权，inf可能被更新，不连通else cout&lt;&lt;dis[n];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-3-SPFA"><a href="#3-5-3-SPFA" class="headerlink" title="3.5.3 SPFA"></a>3.5.3 SPFA</h4><p>用于求带负权的最短路、求负环  O(m) 到 O(nm)</p><p>对BellmanFord的优化，用队列储存是否有必要更新</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int dis[N];bool st[N];  // 储存是否遍历过void spfa(){    memset(dis,0x3f,sizeof(dis));    queue&lt;int&gt; q;    q.push(1);  dis[1]=0;    while(!q.empty())  // 被更新的才有机会更新别人    {        int x=q.front();  q.pop();        st[x]=0;   // 代表 x 曾被更新，但还能被继续更新        for(int i=h[x];i!=-1;i=ne[i])        {            int y=e[i];            if(dis[y]&gt;dis[x]+w[i])            {                dis[y]=dis[x]+w[i];                if(!st[y])                {                    st[y]=1;                    q.push(y);  // y 被更新了，所以可以用它更新其他的                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断是否存在<strong>负环</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int cnt[N]; // 记录 i 的最短路边数，边数大于等于 n 说明存在负环bool spfa(){    queue&lt;int&gt; q;    for(int i=1;i&lt;=n;i++)  //有些点跟负环可能不连通，所以要全入队         q.push(i),st[i]=1;       while(!q.empty())    {        int x=q.front();  q.pop();        st[x]=0;        for(int i=h[x];i!=-1;i=ne[i])        {            int y=e[i];            if(dis[y]&gt;dis[x]+w[i])            {                dis[y]=dis[x]+w[i];                cnt[y]=cnt[x]+1;                if(cnt[y]&gt;=n) return true;  // 存在负环                if(!st[y])                {                    st[y]=1;   q.push(y);                }            }        }    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-4-Floyd"><a href="#3-5-4-Floyd" class="headerlink" title="3.5.4 Floyd"></a>3.5.4 Floyd</h4><p>用于多源最短路</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int k=1;k&lt;=n;k++)   // 记得先枚举中间点    {        for(int i=1;i&lt;=n;i++)        {            for(int j=1;j&lt;=n;j++)            {                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-最小生成树-MST"><a href="#3-6-最小生成树-MST" class="headerlink" title="3.6 最小生成树 MST"></a>3.6 最小生成树 MST</h3><h4 id="3-6-1-Prim"><a href="#3-6-1-Prim" class="headerlink" title="3.6.1 Prim"></a>3.6.1 Prim</h4><p>寻找离集合最近的点 t，加入集合，然后用 t 更新其他未在集合的点离集合的距离。 时间复杂度 $O(n^2)$ </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int dis[N];  // 距离集合最近的距离bool st[N];  // 标记是否在集合中int mp[N][N]; // 初始化为 infvoid prim(){    int ans=0;        for(int i=1;i&lt;=n;i++) dis[i]=mp[1][i]; // 设最初集合只有 1    st[1]=1;    for(int i=1;i&lt;n;i++)  // n-1 次循环    {        int t=-1;        for(int j=1;j&lt;=n;j++) // 寻找不在集合且距离集合最近的点            if(!st[j]&amp;&amp;(t==-1||dis[t]&gt;dis[j]))                t=j;        ans+=dis[t];        st[t]=1;   // 将点 t 加入集合        for(int j=1;j&lt;=n;j++)    // 更新点到集合的距离            dis[j]=min(dis[j],mp[t][j]);    }    if(ans&gt;inf/2) puts("impossible");    else  printf("%d",ans);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-2-Kruskal"><a href="#3-6-2-Kruskal" class="headerlink" title="3.6.2 Kruskal"></a>3.6.2 Kruskal</h4><p>先将权值边排序，选择端点不在同一集合的边并将两个端点加入集合，直到选择 $n-1$ 条边。若选不到 n-1 条边，说明没有mst</p><p>时间复杂度 $O(mlogn)$ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Edge{    int u,v,w;}edge[2*N];bool cmp(Edge x,Edge y){    return x.w&lt;y.w;}void kruskal(){    sort(edge,edge+m,cmp);    int cnt=0,ans=0;    for(int i=1;i&lt;=n;i++) p[i]=i;    for(int i=0;i&lt;m;i++)   // 枚举边    {        int a=edge[i].u,b=edge[i].v;        int x=find(a),y=find(b);        if(x!=y)   // 用并查集判断两个点是否在同一集合        {            cnt++;            p[x]=y;            ans+=edge[i].w;        }        if(cnt==n-1) break;    }    if(cnt==n-1) printf("%d",ans);    else printf("impossible");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-二分图"><a href="#3-7-二分图" class="headerlink" title="3.7 二分图"></a>3.7 二分图</h3><p>定义：无向图 $G=(V,E)$ 中顶点可以被分为两个不相交集合 A 和 B，并且 E 都是跨越组的形式。也就是说一条边的两个顶点不会在同一个集合。</p><blockquote><p>定理：一个图是二分图，当且仅当图中不含奇数环。</p><p>必要性证明：设奇数环 A-&gt;B-&gt;C-&gt;A</p><p>​    所以 AB，BC，CA 不在同一个集合，显然两个集合无法共存</p><p>​    所以二分图不含奇数环</p><p>必要性证明：可以构造出一个二分图</p></blockquote><p>必要性：由已知推出结论</p><p>充分性：由结论推出已知</p><h4 id="3-7-1-搜索染色染色法"><a href="#3-7-1-搜索染色染色法" class="headerlink" title="3.7.1 搜索染色染色法"></a>3.7.1 搜索染色染色法</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 将二分图的两个集合一个染 1，一个染 2bool dfs(int x,int c)  // x 染 c 色{    co[x]=c;    for(int i=h[x];i!=-1;i=ne[i])    {        int y=e[i];        if(co[y]==c) return 0;  // 变的两端颜色相同        if(co[y]==0)            if(!dfs(y,3-c))                return 0;    }    return 1;}int main(){    scanf("%d%d",&amp;n,&amp;m);    memset(h,-1,sizeof h);    while(m--)    {        int x,y;  scanf("%d%d",&amp;x,&amp;y);        add(x,y); add(y,x);  // 无向边    }    for(int i=1;i&lt;=n;i++) // 二分图不一定是连通的，所以要对每个点dfs    {        if(!co[i]&amp;&amp;!dfs(i,1))        {            cout&lt;&lt;"No"&lt;&lt;endl;            return 0;        }    }    cout&lt;&lt;"Yes"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-2-匈牙利算法"><a href="#3-7-2-匈牙利算法" class="headerlink" title="3.7.2 匈牙利算法"></a>3.7.2 匈牙利算法</h4><p>求二分图的最大匹配。</p><p>匈牙利时间复杂度：最坏是 $O(nm)$ ，但一般远小于。</p><p>是一个寻找最长增广路的过程</p><blockquote><p><strong>二分图的匹配</strong>：给定一个二分图 G，在 G 的一个子图 M 中，M 的边集 {E} 中的任意两条边都不依附于同一个顶点，则称 M 是一个匹配。</p><p>通俗的理解：二分图的一个集合是男生，另一个集合是女生，求能凑成最多情侣的对数。</p><p><strong>完美匹配</strong>：覆盖图中所有点的匹配。全部结成对，没有剩余</p><p><strong>二分图的最大匹配</strong>：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><p><a href="https://www.acwing.com/problem/content/863/">二分图的最大匹配</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;int,int&gt; pii;const int N=505,M=100005,inf=0x3f3f3f3f;int n1,n2,m,ans;int h[M],e[M],ne[M],idx;int match[N];   // 右边女孩 i 已经匹配到左边的 match[i] 了bool st[N];void add(int a,int b){    e[idx]=b; ne[idx]=h[a]; h[a]=idx++;}bool find(int x){    for(int i=h[x];i!=-1;i=ne[i])    {        int y=e[i];        if(!st[y])  // 还有机会选择 y        {            st[y]=1;  // 标记已经尝试了，这次不行的话注定无缘            if(match[y]==0||find(match[y]))            {                match[y]=x;   // x 与 y 匹配成功                return 1;            }        }    }    return 0;}int main(){    scanf("%d%d%d",&amp;n1,&amp;n2,&amp;m);    memset(h,-1,sizeof h);    while(m--)    {        int x,y;  scanf("%d%d",&amp;x,&amp;y);        add(x,y);   // 只存一条边    }    for(int i=1;i&lt;=n1;i++)    {        memset(st,0,sizeof(st));  // 右边每个都有机会与之结对        if(find(i))  ans++;    }    cout&lt;&lt;ans&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四章-数学"><a href="#第四章-数学" class="headerlink" title="第四章 数学"></a>第四章 数学</h2><h3 id="4-1-基础数学"><a href="#4-1-基础数学" class="headerlink" title="4.1 基础数学"></a>4.1 基础数学</h3><h4 id="4-1-1质数"><a href="#4-1-1质数" class="headerlink" title="4.1.1质数"></a>4.1.1质数</h4><p>只能被 1 和本身整除的数。1 不是质数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 判断是否为质数bool is_prime(int x){    if(x==1) return 0;    for(int i=2;i&lt;=x/i;i++)        if(x%i==0) return 0;    return 1;}// 分解质因数void divide(int x){    for(int i=2;i&lt;=x/i;i++)    {        if(x%i==0)        {            int s=0;            while(x%i==0)            {                x/=i;  s++;            }            printf("%d %d\n",i,s);        }    }    if(x!=1) printf("1 %d",x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>质数筛: 求[1,n]的质数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 埃氏筛 nloglognbool p[N]; // p[i]=1 说明不是质数void init(){    p[1]=1;    for(int i=2;i&lt;=n;i++)        if(!p[i]) // p[i]==0 说明 i 是质数            for(int j=2*i;j&lt;=n;j+=i)                p[j]=1;}// 线性筛, n 只会被最小质因子筛掉void init(){    for(int i=2;i&lt;=n;i++)    {        if(!st[i]) primes[cnt++]=i;        for(int j=0;primes[j]&lt;=n/i;j++)  // 从小到大枚举质数        {            st[primes[j]*i]=1;      // 只会用最小质因子去筛            if(i%primes[j]==0) break; // 当枚举到 i 的最小质因子时退出，因为 i×p[j+t]的最小质因子是p[j]// i%pj == 0, pj定为i最小质因子，pj也定为pj*i最小质因子// i%pj != 0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合数一定能被线性筛筛掉：因为合数=p*k,p 是最小质因子，当枚举质数到 i=k 时，就被筛掉了。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int j=0;primes[j]&lt;=n/i;j++)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不能去掉等号，当去掉等号会误筛掉很多 n 附近的合数。</p><h4 id="4-1-2-因数（约数）"><a href="#4-1-2-因数（约数）" class="headerlink" title="4.1.2 因数（约数）"></a>4.1.2 因数（约数）</h4><p>约数个数   约数之和</p><blockquote><p>约数个数定理: 对于一个大于 1 的正整数 n 可以分解质因数</p><script type="math/tex; mode=display">n\ =\ \prod_{i=1}^{k} p_i^{a_i}=p_1^{a_1}·p_1^{a_1}····p_k^{a_k}\\p_1,p_2···p_k为 n 的质因子</script><p>约数的个数：$ f(n)=\sum_{i=1}^{k} (a_i+1) $  </p><p>约数的和：</p><script type="math/tex; mode=display">s(n)=\prod_{i=1}^{k} \sum_{j=0}^{a_i} p_i^j=(p_1^0+p_1^1+···+p_1^{a_1})\times ···\times (p_k^0+p_k^1+···+p_k^{a_k})</script></blockquote><p>最大公约数 gcd </p><p>d|a 且 d|b, 那么 d|(ax+by)</p><p>整除符号: |, 若 d|a 等价于 a=kd, k 为整数</p><blockquote><p><strong>欧几里得算法</strong>：$gcd(a,b)=gcd(b,a\ \%\  b)$  <span id="oujilide"> </span> </p><p>证明：不妨设 $a&gt;b&gt;0$，有 $a=k·b+r,\ \ k=\left \lfloor \frac{a}{b} \right \rfloor\ ,\ \ r=a\%b $ </p><p>如果 $r=0$, gcd(a,b)=gcd(b,0)=b</p><p>如果 $r\ne 0$, $r=a-k·b,\ \ 左右同除\ d\ ,得 \frac{r}{d}=\frac{a}{d}-\frac{k·b}{d}=m$,显然 m 是整数，所以 d|r, 即d|(a%b)。</p><p>假设 d 是 （b，a%b) 的任意一个公约数，a=yd+kb，两边同除 d 得 $\frac{a}{d}=y+\frac{kb}{d}$，所以 y 为正整数，d也是（a，b）的公约数。</p><p>所以 (a, b)和(b, a%b) 的公约数是一样的，自然最大公约数也一样。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 辗转相除法int gcd(int a,int b){    return b ? gcd(b, a%b) : a;  // b==0 输出}// STL函数c = __gcd(a,b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-欧拉函数"><a href="#4-2-欧拉函数" class="headerlink" title="4.2 欧拉函数"></a>4.2 欧拉函数</h3><blockquote><p>phi(n)为 [1,n] 中与 n 互质的个数</p><p>n 的 质因子分解为 $ n = p_1^{a_1}p_2^{a_2}···p_k^{a_k}$ </p><p>那么 $phi(n)=n\times (1-\frac{1}{p_1})(1-\frac{1}{p_2})···(1-\frac{1}{p_k})$ </p><p>证明1（容斥原理）：</p><script type="math/tex; mode=display">phi(n)=n-\frac{n}{p_1}-\frac{n}{p_2}-···-\frac{n}{p_k}+\frac{n}{p_1p_2}+\frac{n}{p_1p_3}+···\\(分母为奇数个p为减，偶数个p为加)\\=n\times (1-\frac{1}{p_1})(1-\frac{1}{p_2})···(1-\frac{1}{p_k})</script></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 欧拉函数</span><span class="token keyword">int</span> <span class="token function">phi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">=</span>res<span class="token operator">/</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> n<span class="token operator">/=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">/</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 欧拉筛</span><span class="token keyword">int</span> phi<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">phis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                phi<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            phi<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>· 质数除了自己，其他都互质，所以 phi[i]=i-1;</p><p>· 当 i%prime[j]==0，p~j~ 是 i 的最小质因子，所以 i 的分解质因子里有 p~j~，因为欧拉函数和质因子指数无关，改变的只是前面的系数，所以 phi[i×p~j~]=i×p~j~×phi[i]</p><p>· 当 i%prime[j]!=0，i×p~j~ 比 i 的质因子多了 p~j~，所以</p><p>phi[i×p~j~]=phi[i]×p~j~×(1-1/p~j~)=phi[i]×(p~j~-1)</p><blockquote><p><strong>欧拉定理</strong>：a 与 n 互质，则有</p><script type="math/tex; mode=display">a^{phi(n)}\equiv 1\ (mod\ n)</script><p>证明：[1,n]中所有与 n 互质的数为 $a_1,a_2,···，a_{phi(n)}$，那么$a<em>a_1 \% n,a</em>a_2\% n,···，a*a_{phi(n)}\%n$ 也是[1,n]中与 n 互质的数</p><p>所以两列数除顺序外相同，所以相乘相等 $a^{phi(n)}<em>(a_1</em>a_2<em>···</em>a_{phi(n)})\%n=a_1<em>a_2</em>···*a_{phi(n)}$</p><p>化简得 $a^{phi(n)}\equiv 1(mod\ n)$ 得证</p><p>a % n = b 和 a $\equiv$ b (mod n)是等价的</p><p><strong>费马小定理</strong>：p 是质数且 a 与 p 互质，则有</p><script type="math/tex; mode=display">a^{p-1}\equiv 1\ (mod\ n)</script></blockquote><p>4.3 快速幂</p><p>求 $a^k\ \%\ mod$ </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int qpow(int a,int k){    int res=1,base=a;    while(k)    {        if(k&amp;1) res=(ll)res*base%mod;        base=(ll)base*base%mod;        k&gt;&gt;=1;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵快速幂：</p><h3 id="4-4-扩展欧几里得"><a href="#4-4-扩展欧几里得" class="headerlink" title="4.4 扩展欧几里得"></a>4.4 扩展欧几里得</h3><blockquote><p>==裴属定理==：若 a, b 是整数, 且 gcd(a,b) = d，那么对于任意的整数 x、y, <strong>ax + by</strong> 都一定是 d 的倍数，特别地，一定存在整数 x，y，使 ax+by=d 成立，即 $ax+by=kd\ \ (k\ge 1)$ 。</p><p>证明：懒得证</p><p>d|a 且 d|b, 所以 d|ax 且 d|by, 所以 d|(ax+by) </p><p>==推论==：</p><ol><li>对于方程 ax+by=1，只有当整数a,b互质时，方程才有整数解</li><li>a，b互质的充要条件是 ax+by=1 有整数解 </li></ol><p>证明1：假设 a，b不互质，则a，b可以表示为 $a=q\times d$, $b=p\times d$ 。代入上式得</p><script type="math/tex; mode=display">q\times d \times x+p\times d \times y=1\\q\times x+p\times y=\frac{1}{d}\\d=gcd(a,b)\ne 1\\</script><p>所以该方程右边为小数，不存在整数解。</p><p>扩展欧几里得求 ax+by=d 的一组解的证明</p><p>当 $b=0$，式子转化为 $ax+by=a$，所以 x=1，y=0</p><p>当 $b\ne 0$，由<a href="#oujilide">欧几里得算法</a> gcd(a,b)=gcd(b,a%b)</p><script type="math/tex; mode=display">ax+by = gcd(a,b)=gcd(b,\ a\ \%\ b)\\=bx'+(a\ \%\ b)y' \\=bx'+(a-b*\left \lfloor \frac{a}{b}  \right \rfloor )y'\\=ay'+b(x'-\left \lfloor \frac{a}{b}  \right \rfloor y')\\比较等式两边可知\ x=y'\ \ \ y=x'-\left \lfloor \frac{a}{b}  \right \rfloor y'</script><script type="math/tex; mode=display">\begin{flalign*}&通解: \begin{cases}  &  x=x_0+k\frac{b}{d} \\  &  y=y_0-k\frac{a}{d}\end{cases}\\证明: &\ \ 将其代回原式， a(x_0+k\frac{b}{d})+b(y_0-k\frac{a}{d})=m\\&\ \ 展开得\ \  ax_0+by_0=m ,含有\ k\ 的被消去了\\&\ \ 得到的式子和原式一样，证毕&\end{flalign*}</script></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 伴随着欧几里得算法更新 x y 的过程void exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)  x=1,y=0;    else    {        exgcd(b,a%b,x,y);         int t=x;  x=y;        y=t-a/b*y;   // 对应上面的证明    }}// 省代码int exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)    {        x=1; y=0;        return a;    }    int d=exgcd(b,a%b,y,x); // 调换 x y    y-=a/b*x;    return d;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Exgcd应用：求解线性同余方程 <span id="linear congruent equation"> </span>  </p><script type="math/tex; mode=display">&ax\equiv\ b\ \ \ (mod\ \ m)\\\Longleftrightarrow & ax\ \%\ m=b\\\Longleftrightarrow & ax=my+b\\\Longleftrightarrow & ax-my=b \\\Longleftrightarrow & ax+my'=b\\\Longleftrightarrow & 给定a,b,m\ \  求 x\\& 所以如果b=k·gcd(a,m)才有解\\& 解为 gcd(a,m)/b*x\%m</script><blockquote><p>答案对 m 取模仍为答案</p><p>$ax\ \%\ m=b\Longleftrightarrow\ a·(x\ \%\ m)\ \%\ m=b$ </p><p>所以对 x % m仍是个答案</p></blockquote><h3 id="4-5-逆元"><a href="#4-5-逆元" class="headerlink" title="4.5 逆元"></a>4.5 逆元</h3><p>$ \frac{a}{b}\equiv a\times x \%\ m $，x 就是 b 的逆元</p><h5 id="4-5-1-快速幂求逆元"><a href="#4-5-1-快速幂求逆元" class="headerlink" title="4.5.1 快速幂求逆元"></a>4.5.1 快速幂求逆元</h5><p>要求模数 m 为质数。<br>b 存在乘法逆元的充要条件是 <strong>b 与模数 m 互质</strong> 。</p><blockquote><p>​    当 b 与 m 不互质时，因为 m 为质数，所以 b 为 m 的倍数，即b%m==0 时无解，费马小定理不成立。</p><p>​    当模数 <strong>m 为质数</strong>时且 <strong>b 和 m 互质</strong>时，$b^{m−2}$ 即为 b 的乘法逆元。</p><p>证明：由费马小定理 $ b^{m-1}\equiv 1\%\ m$</p><p>令    $\frac{a}{b}\equiv a\times x \%\ m$</p><p>所以$ \frac{a}{b}\times b^{m-1}\equiv a\times x \% \ m$ </p><p><strong>因此：</strong>$ a \times b^{m-2}\equiv a\times x \% \ m$   a 与 m 互质，约去</p><p><strong>所以：</strong>$x\equiv b^{m-2}  \%m$</p></blockquote><h5 id="4-5-2-扩展欧几里得求逆元"><a href="#4-5-2-扩展欧几里得求逆元" class="headerlink" title="4.5.2 扩展欧几里得求逆元"></a>4.5.2 扩展欧几里得求逆元</h5><p>扩展欧几里得可以求解<a href="#linear congruent equation">线性同余方程</a> $ax\equiv b\ \ (mod\ \ m)$ </p><p>求模 m 意义中 a 的逆相对于求$ax\equiv1\ \ (mod\ \ m)$， ax-my=1。gcd(a,m) 不为1则说明逆元不存在,若为1，则调整结果为x=(x%mod+mod)%mod.</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int exgcd(int a,int b,int &amp;x,int &amp;y){    if(!b)    {        x=1; y=0;        return a;    }    int d=exgcd(b,a%b,y,x); // 调换 x y    y-=a/b*x;    return d;}int a,m,x,y;  cin&gt;&gt;a&gt;&gt;m;int d=exgcd(a,m,x,y);if(d==1) cout&lt;&lt;x%m&lt;&lt;endl;else cout&lt;&lt;"No"&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-中国剩余定理"><a href="#4-6-中国剩余定理" class="headerlink" title="4.6 中国剩余定理"></a>4.6 中国剩余定理</h3><p>问题：整数 $m_1,m_2,···,m_n$ 两两互素，则对于任意整数$a_1,a_2,···,a_n$，方程组：</p><script type="math/tex; mode=display">\left\{\begin{matrix}  x\equiv a_1\ \ (mod\ \ m_1) \\  x\equiv a_2\ \ (mod\ \ m_2) \\ ······ \\  x\equiv a_n\ \ (mod\ \ m_n)\end{matrix}\right.\\令\ \ M = \prod_{i=1}^{n}m_i  \\则 x\equiv \sum_{i=1}^{n}a_i×\frac{M}{m_i}×[(\frac{M}{m_i})^{-1}]\ \  (mod\ \ M)</script><blockquote><p><a href="https://www.acwing.com/problem/content/206/">扩展中国剩余定理</a></p><script type="math/tex; mode=display">\begin{flalign*}&选取两个方程\ \  x~~ mod~~a_1 = m_1，x\ \ mod\ \  a_2 = m_2\\&可以写成\qquad \ x\ =\ k_1a_1 + m_1，x\ =\ k_2a_2 + m_2\\&由两式得\qquad\ k_1a_1 - k_2a_2 = m_2 - m_1\\&通过扩欧可以知道\  k_1,k_2\ 有解等价于\ gcd(a_1,-a_2)|(m_2-m_1) \\& 解出通解\ \  k_1=k_1+k\frac{a_2}{d},\ k_2=k_2+k\frac{a_1}{d},\ r为任意正整数 \\& 将\ k_1,k_2\ 的通解代回得\ x=(k_1+k\frac{a_2}{d})a_1+m_1=k\frac{a_1a_2}{d}+(k_1a_1+m_1)  \\& 两个方程合并成一个方程，然依次合并到只剩一个，这个式子的解就是答案  \\&注： \frac{a_1a_2}{d}就是\ a_1,a_2\ 的最小公倍数；注意取模。&\end{flalign*}</script></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ll a1,m1;  cin&gt;&gt;a1&gt;&gt;m1; // 第一个方程int f=0;while(--n)  // 输入第2~n个方程{    ll a2,m2,k1,k2;  cin&gt;&gt;a2&gt;&gt;m2;    ll d=exgcd(a1,a2,k1,k2);    if((m2 - m1) % d)  // 不是 d 的倍数无解    {        cout&lt;&lt;-1&lt;&lt;endl; return 0;    }    // a1k1+a2k2=d的通解为 k1=k1+k*(a2/d)，k=0， k1是正解中最小的    // a1k1+a2k2=m2-m1 的通解为, 所以k1要扩大 (m2-m1)/d 倍    k1=k1 * (m2 - m1) / d;     // 但是经过乘了个 m2-m1 可能变负了    ll t=a2/d;   // 由通解可知模 t 也是解    k1=(k1 % t + t) % t;             // 新的方程 x = k(a2·a1/d)+k1a1+m1    m1=k1 * a1 + m1;    a1=abs(a1 / d * a2);}// 最后一个方程是 x=m1 (mod a1), x%a1=m1, m1&lt;a1, 所以m1是一个解cout&lt;&lt;m1&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-高斯消元"><a href="#4-7-高斯消元" class="headerlink" title="4.7 高斯消元"></a>4.7 高斯消元</h3><h4 id="4-7-1-线性方程组"><a href="#4-7-1-线性方程组" class="headerlink" title="4.7.1 线性方程组"></a>4.7.1 线性方程组</h4><p>用于求解线性方程组  $ \left\{\begin{matrix}<br>a_{11}x_1+a_{12}x_2+···+a_{1n}x_n=b_1 \\<br>a_{21}x_1+a_{22}x_2+···+a_{2n}x_n=b_2 \\<br>······ \\<br>a_{n1}x_1+a_{n2}x_2+···+a_{nn}x_n=b_n<br>\end{matrix}\right.$ </p><p>矩阵形式为 $Ax=B$，$A=\begin{bmatrix}<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n}\\<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n} \\<br> ··· &amp; ··· &amp; ··· &amp; ···\\<br> a_{11} &amp; a_{12} &amp; ··· &amp; a_{1n}<br>\end{bmatrix}$，$B=\begin{bmatrix}<br> b_1\\<br>b_2\\<br>\vdots  \\<br>b_n<br>\end{bmatrix}$ 。</p><p>将增广矩阵 [AB] 初等变换为化为上三角。高斯消元就是这个过程。</p><blockquote><ol><li>选取系数最大的那行，可以避免系数变得太大，精度较高，将r行与下面的行比较，不与第一行比</li><li>若最大的是 0，此行全 0，则无需操作</li><li>将含有更大的数这行与 r 行交换</li><li>将 r 行同时除 a[r,c],使a[r,c]=1</li><li>用新的 r 行对下面所有行的第c列消为 0，消的元素对应的每一个元素都要改变，此时 a[r,c]=1,所以j行-r行×a[i,c]即可</li><li>r++，接着操作下一行，重复上述过程。</li><li>根据R(A),R(AB),n的关系判断解的情况</li></ol></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">double a[105][105];int gauss(){    int c,r;  // r 是行，计算后也代表矩阵的秩    for(c=0,r=0;c&lt;n;c++)  // 枚举每一列    {        int t=r;        // 1、最大系数可以避免系数变得太大，精度较高        //    将r行与下面的行比较，不与第一行比        for(int i=r;i&lt;n;i++)            if(fabs(a[i][c])&gt;fabs(a[t][c]))                t=i;        // 2、最大的是 0，此行全 0        if(fabs(a[t][c])&lt;eps) continue;        // 3、将含有更大的数这行与 r 行交换        for(int i=c;i&lt;=n;i++)  swap(a[t][i],a[r][i]);        // 4、将 r 行同时除 a[r][c],使a[r][c]=1        for(int i=n;i&gt;=c;i--)  a[r][i] /= a[r][c];        // 5、用这行对下面行的第c列消为 0        for(int i=r+1;i&lt;n;i++)            if(fabs(a[i][c])&gt;eps)            {                // 消0对应的行的每一个元素都要改变                // 此时 a[r][c]=1,所以j行-r行×a[i][c]即可                for(int j=n;j&gt;=c;j--)                    a[i][j]-=a[r][j]*a[i][c];            }        // 6、接着对第 r+1 行操作        r++;    }    // 7、判断解的情况    if(r&lt;n)    {        for(int i=r;i&lt;n;i++)            if(a[i][n]&gt;eps)                return 0;  // R(A)&lt;R(AB)，无解        return 1; // R(A)=R(AB)&lt;n 无穷解    }    // R(A)=R(AB)=n 唯一解    // 已经化成上三角形式,从右下角开始化成除增广B矩阵外仅正对角线形式    for(int c=n-1;c&gt;0;c--)  // 从左往右枚举列    {        for(int r=0;r&lt;c;r++)  // 行            a[r][n]-=a[r][c]*a[c][n];  // c 也代表选中的1在的列    }    return 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-2-异或方程组"><a href="#4-7-2-异或方程组" class="headerlink" title="4.7.2 异或方程组"></a>4.7.2 异或方程组</h4><p>异或可以看出不进位的加法，同样可通过系数矩阵求解，即初等变换不改变解</p><p>异或方程组 $ \left\{\begin{matrix}<br>a_{11}x_1 \oplus a_{12}x_2\oplus···\oplus a_{1n}x_n=b_1 \\<br>a_{21}x_1\oplus a_{22}x_2\oplus ···\oplus a_{2n}x_n=b_2 \\<br>······ \\<br>a_{n1}x_1\oplus a_{n2}x_2\oplus ···\oplus a_{nn}x_n=b_n<br>\end{matrix}\right.$，$a_{ij}，b_{ij}=0\ \  or\ \ 1$ </p><p>对矩阵增广矩阵 [AB] 操作目标和线性方程组相同，代码这样写的原因也和普通高斯消元类似。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int gauss(){    int c=0,r=0;    for(;c&lt;n;c++)    {        int t=r;        for(int i=r;i&lt;n;i++)            if(a[i][c])            {                t=i; break;            }        if(a[t][c]==0) continue;  // 这一列全为 0        for(int i=c;i&lt;=n;i++) swap(a[r][i],a[t][i]);        // 因为a[r][c]=1，省略化为 1 的过程        // 对 r 行以下的行的 c 列消0        for(int i=r+1;i&lt;n;i++)        {            if(a[i][c]==0) continue;            for(int j=c;j&lt;=n;j++)  // 都是1，直接两行对应位置异或                a[i][j]^=a[r][j];        }        r++;    }    if(r&lt;n)    {        for(int i=r;i&lt;n;i++)            if(a[i][n]==1) return 0;        return 1;    }    for(int c=n-1;c&gt;0;c--)    {        for(int r=0;r&lt;c;r++)        {            if(a[r][c]==0) continue;            a[r][n]^=a[c][n];        }    }    return 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-组合数"><a href="#4-8-组合数" class="headerlink" title="4.8 组合数"></a>4.8 组合数</h3><blockquote><p>组合数公式：</p><ol><li><p>$C_a^b=C_{a-1}^b+C_{a-1}^{b-1}$ 用于递推、预处理</p></li><li><p>$C_a^b=C_{a}^{a-b}=\frac{a!}{b!(a-b)!}$ 用于直接求，需要求逆元</p></li><li><p>$ C_n^0+C_n^1+C_n^2+···+C_n^n=2^n $</p><p>证明：想一下，从 n 个物品取，求取法，左边是从0个，1个···到n个的取法，它们的和就是总取法，右边可以表示一个商品有两种状态，取或者不取，由乘法原理可知是$2^n$。</p><p>严谨的数学归纳法：n=1,显然成立。</p><p>假设 n=k 时公式成立 $\sum_{i=0}^{k}C_k^i=2^n$，那么当 n=k+1 时</p><p>$ C_{k+1}^{0}+C_{k+1}^{1}+···+C_{k+1}^{k}+C_{k+1}^{k+1} = 2 $，由公式 1. 可以将$C_{k+1}^{i}$ 拆成两部分，发现正好等于 2倍的 $\sum_{i=0}^{k}C_k^i$，即 2*2^k^=2^k+1^。</p></li><li><p>==二项式系数==：$(a+b)^n=C_{n}^{0}b^n+C_{n}^{1}ab^{n-1}+···+C_{n}^{i}a^ib^{n-i}+···+C_{n}^{n}a^n $ </p><p>证明：数学归纳···</p></li><li><p>==卢卡斯定理==：C_a^b\equiv C_{a\%p}^{b\%p}·C_{a/p}^{b/p}\ \ (mod\ \ p)$ 用于求a、b较大的情况</p><p>另一种形式$C_a^b=C_{a_0}^{b_0}+C_{a_1}^{b_1}+···+C_{a_k}^{b_k}\ \ \ (mod\ \ p)$，其中</p><p>$a=a_0+a_1p+a_2p^2+···+a_kp^k$，$b=b_0+b_1p+b_2p^2+···+b_kp^k$ </p></li></ol><p>证明：</p><p>首先证明   $(1+x)^p \equiv 1+x^p\ \ (mod\ \ p)$ </p><p>$左边=C_p^01+C_p^1x+C_p^2x^2+···+C_p^px^p$，因为$C_p^i=\frac{p!}{(p-i)!·i!}$，p为质数，所以当 $0&lt;i&lt;p$ 时，$C_p^ix^i$ 被 p 取模消去，所以只留下两端，得证。</p><p>同理证得: $(1+x)^{p^\alpha}\equiv 1+x^{p^\alpha } \ \ (mod\ \ p)$ .</p><p>将 $a，b$ 转化为 p 进制数，$a=a_0+a_1p+a_2p^2+···+a_kp^k$，$b=b_0+b_1p+b_2p^2+···+b_kp^k$ </p><script type="math/tex; mode=display">\begin{align*}(1+x)^a &= (1+x)^{a_0+a_1p+a_2p^2+···+a_kp^k}\\& = (1+x)^{a_0}\times((1+x)^{p_1})^{a_1}\times···\times((1+x)^{p_k})^{a_k}\\&\equiv(1+x)^{a_0}\times(1+x^{p^1})^{a_1}\times···\times(1+x^{p^k})^{a_k}\ \ (mod\ \ n) &\end{align*}</script><p>$C_a^b$ 就是 $(1+x)^a$ 展开式中 $x^b$ 的系数，即 $x^{b_0+b_1p+b_2p^2+···+b_kp^k}$ 的系数。对比左边和右边每一项 $x^b$ 的系数可知</p><p>$C_a^b\equiv C_{a_0}^{b_0}\times C_{a_1}^{b_1}\times ···\times C_{a_k}^{b_k}\ \ (mod\ \ n) $ </p><p>$C_{a_0}^{b_0}=C_{a\%p}^{b\%p}$，因为转化为p进制的第一位就是对 p 取余得到的</p><p>$C_{a/p}^{b/p}=C_{a_1}^{b_1}\times ···\times C_{a_k}^{b_k}$，p 进制下，将 a，b 右移一位相当于 /p ，和 $C_a^b$ 一样分析，证明这个式子是正确。</p></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int c[N][N];void init{    for(int i=0;i&lt;N;i++)  // i 代表总的，j 代表 被选的        for(int j=0;j&lt;=i;j++)            if(!j) c[i][j]=0;    else  c[i][j]=c[i-1][j]+c[i-1][j-1]%mod;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int c(int a,int b){    int m=jc[a],z=(ll)jc[b]*jc[a-b]%mod;// 预处理的阶乘数组    return (ll)m*kpow(z,mod-2)%mod;  // 快速幂求逆元}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int lucas(ll a,ll b,int p){    if(a&lt;p &amp;&amp; b&lt;p)  return c(a,b,p);    return (ll)c(a%p, b%p, p) * lucas(a/p, b/p, p) % p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不取模的组合数，高精度+质因子分解</p><p>将阶乘分式约分，消去分母，再将分母质因子分解，答案就是这些质因子的乘积。</p><p>求 n！质因子个数: $num = \frac{n}{p}+\frac{n}{p}+···+\frac{n}{p^k}$ </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 求质因子及其个数的过程 int get(int n,int p){    int res=0;    while(n)  // num=n/p+n/p^2+···    {        res+=n/p;        n/=p;    }    return res;}for(int i=0;i&lt;cnt;i++)   // C(a,b) {    int p=primes[i];     sum[i]=get(a,p)-get(a-b,p)-get(b,p); // 统计个数 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-9-博弈论"><a href="#4-9-博弈论" class="headerlink" title="4.9 博弈论"></a>4.9 博弈论</h4><p>若一个游戏满足：</p><ol><li>由两名玩家交替行动</li><li>游戏进行的任意时刻，可以执行的合法行动与轮到哪位玩家无关</li><li>不能行动的玩家判负</li><li>则称该游戏为一个公平组合游戏</li></ol><p>==必胜状态==：先手进行某一个操作，留给后手是一个必败状态时，对于先手来说是一个必胜状态。可以走到某一个必败状态。</p><p>==必败状态==：先手无论如何操作，留给后手都是一个必胜状态时，对于先手来说是一个必败状态。走不到任何一个必败状态。</p><h5 id="4-9-1-Nim游戏"><a href="#4-9-1-Nim游戏" class="headerlink" title="4.9.1 Nim游戏"></a>4.9.1 Nim游戏</h5><p>给定 n 堆石子，两位玩家轮流操作，每次操作可以从任意一堆石子中拿走任意数量的石子（可以拿完，但不能不拿），最后无法进行操作的人视为失败。问如果两人都采用最优策略，先手是否必胜。</p><blockquote><p>结论：取石子到最后阶段时，每堆石子的个数都是 0 ，所以异或值也是 0</p><p>​    假设 n 堆石子，石子数目分别是 $a_1,a_2,…,a_n$ 如果$a_1⊕a_2⊕…⊕a_n=x≠0$，先手必胜；否则先手必败。</p><p>​    证明：设 x 的二进制表示中最高的一位 1 在第 k 位</p><p>​    $a_1 - a_n$ 必然存在一个数 $a_i$ 的第 k 位是 1，且 $a_i\oplus x&lt;a_i$，然后从第 i 堆石子拿出 $a_i-a_i\oplus x$，第 i 堆还剩 $a_i\oplus x$ 个,这时有：$a_1⊕a_2⊕…\oplus a_i\oplus x\oplus…⊕a_n= 0$ </p></blockquote><h4 id="4-10-容斥原理"><a href="#4-10-容斥原理" class="headerlink" title="4.10 容斥原理"></a>4.10 容斥原理</h4><p>图图</p><p>证明：假设元素 x 在 k 个集合中出现，则被计算的次数为</p><p>$C_k^1 - C_k^2+C_k^3+···+(-1)^{k-1}C_k^k $ ，由二次项展开可知，该式等于 $-(1-1)^k+1=C_k^0=1 $，因此一个元素只被计算一次。</p><p>常常与二进制枚举配合使用</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i=1;i&lt;(1&lt;&lt;m);i++) // 1~1111, 共有 2^n-1种选法{    int cnt=0;    for(int j=0;j&lt;m;j++)  // 数组从 0 开始    {        // i&gt;&gt;j &amp; 1        if(i&amp;(1&lt;&lt;j))   // 判断i低j位是否为1，若为1 则选择这个        {            cnt++;  // 选择个数+1，            // 对这个数进行某种操作        }    }    // 对选择的进行计算，比如奇数个 加，偶数个 减。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-11-卡特兰数"><a href="#4-11-卡特兰数" class="headerlink" title="4.11 卡特兰数"></a>4.11 卡特兰数</h4><p><strong>卡特兰数</strong>：$C_{2n}^n - C_{2n}^{n-1}=\frac{C_{2n}^n}{n+1}$  </p><p>应用：<a href="https://www.acwing.com/problem/content/891/">构造01序列</a>，<a href="https://www.acwing.com/problem/content/132/">火车进出栈</a>，</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int res=1;for(int i=n+1;i&lt;=2*n;i++) res=(ll)res*i%mod;int x,y;for(int i=1;i&lt;=n+1;i++){    exgcd(i,mod,x,y);    x=(x%mod+mod)%mod;    res=(ll)res*x%mod;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
